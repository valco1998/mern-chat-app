import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
/**
 * @generated from enum cyclonedx.v1_5.Classification
 */
export declare enum Classification {
    /**
     * @generated from enum value: CLASSIFICATION_NULL = 0;
     */
    NULL = 0,
    /**
     * A software application. Refer to https://en.wikipedia.org/wiki/Application_software for information about applications.
     *
     * @generated from enum value: CLASSIFICATION_APPLICATION = 1;
     */
    APPLICATION = 1,
    /**
     * A software framework. Refer to https://en.wikipedia.org/wiki/Software_framework for information on how frameworks vary slightly from libraries.
     *
     * @generated from enum value: CLASSIFICATION_FRAMEWORK = 2;
     */
    FRAMEWORK = 2,
    /**
     * A software library. Refer to https://en.wikipedia.org/wiki/Library_(computing) for information about libraries. All third-party and open source reusable components will likely be a library. If the library also has key features of a framework, then it should be classified as a framework. If not, or is unknown, then specifying library is recommended.
     *
     * @generated from enum value: CLASSIFICATION_LIBRARY = 3;
     */
    LIBRARY = 3,
    /**
     * A software operating system without regard to deployment model (i.e. installed on physical hardware, virtual machine, image, etc) Refer to https://en.wikipedia.org/wiki/Operating_system
     *
     * @generated from enum value: CLASSIFICATION_OPERATING_SYSTEM = 4;
     */
    OPERATING_SYSTEM = 4,
    /**
     * A hardware device such as a processor, or chip-set. A hardware device containing firmware should include a component for the physical hardware itself, and another component of type 'firmware' or 'operating-system' (whichever is relevant), describing information about the software running on the device. See also the list of known device properties: https://github.com/CycloneDX/cyclonedx-property-taxonomy/blob/main/cdx/device.md
     *
     * @generated from enum value: CLASSIFICATION_DEVICE = 5;
     */
    DEVICE = 5,
    /**
     * A computer file. Refer to https://en.wikipedia.org/wiki/Computer_file for information about files.
     *
     * @generated from enum value: CLASSIFICATION_FILE = 6;
     */
    FILE = 6,
    /**
     * A packaging and/or runtime format, not specific to any particular technology, which isolates software inside the container from software outside of a container through virtualization technology. Refer to https://en.wikipedia.org/wiki/OS-level_virtualization
     *
     * @generated from enum value: CLASSIFICATION_CONTAINER = 7;
     */
    CONTAINER = 7,
    /**
     * A special type of software that provides low-level control over a devices hardware. Refer to https://en.wikipedia.org/wiki/Firmware
     *
     * @generated from enum value: CLASSIFICATION_FIRMWARE = 8;
     */
    FIRMWARE = 8,
    /**
     * A special type of software that operates or controls a particular type of device. Refer to https://en.wikipedia.org/wiki/Device_driver
     *
     * @generated from enum value: CLASSIFICATION_DEVICE_DRIVER = 9;
     */
    DEVICE_DRIVER = 9,
    /**
     * A runtime environment which interprets or executes software. This may include runtimes such as those that execute bytecode or low-code/no-code application platforms.
     *
     * @generated from enum value: CLASSIFICATION_PLATFORM = 10;
     */
    PLATFORM = 10,
    /**
     * A model based on training data that can make predictions or decisions without being explicitly programmed to do so.
     *
     * @generated from enum value: CLASSIFICATION_MACHINE_LEARNING_MODEL = 11;
     */
    MACHINE_LEARNING_MODEL = 11,
    /**
     * A collection of discrete values that convey information.
     *
     * @generated from enum value: CLASSIFICATION_DATA = 12;
     */
    DATA = 12
}
/**
 * Specifies the flow direction of the data. Valid values are: inbound, outbound, bi-directional, and unknown. Direction is relative to the service. Inbound flow states that data enters the service. Outbound flow states that data leaves the service. Bi-directional states that data flows both ways, and unknown states that the direction is not known.
 *
 * @generated from enum cyclonedx.v1_5.DataFlowDirection
 */
export declare enum DataFlowDirection {
    /**
     * @generated from enum value: DATA_FLOW_NULL = 0;
     */
    DATA_FLOW_NULL = 0,
    /**
     * @generated from enum value: DATA_FLOW_INBOUND = 1;
     */
    DATA_FLOW_INBOUND = 1,
    /**
     * @generated from enum value: DATA_FLOW_OUTBOUND = 2;
     */
    DATA_FLOW_OUTBOUND = 2,
    /**
     * @generated from enum value: DATA_FLOW_BI_DIRECTIONAL = 3;
     */
    DATA_FLOW_BI_DIRECTIONAL = 3,
    /**
     * @generated from enum value: DATA_FLOW_UNKNOWN = 4;
     */
    DATA_FLOW_UNKNOWN = 4
}
/**
 * @generated from enum cyclonedx.v1_5.ExternalReferenceType
 */
export declare enum ExternalReferenceType {
    /**
     * Use this if no other types accurately describe the purpose of the external reference
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_OTHER = 0;
     */
    OTHER = 0,
    /**
     * Version Control System
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_VCS = 1;
     */
    VCS = 1,
    /**
     * Issue or defect tracking system, or an Application Lifecycle Management (ALM) system
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_ISSUE_TRACKER = 2;
     */
    ISSUE_TRACKER = 2,
    /**
     * Website
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_WEBSITE = 3;
     */
    WEBSITE = 3,
    /**
     * Security advisories
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_ADVISORIES = 4;
     */
    ADVISORIES = 4,
    /**
     * Bill-of-material document (CycloneDX, SPDX, SWID, etc)
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_BOM = 5;
     */
    BOM = 5,
    /**
     * Mailing list or discussion group
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_MAILING_LIST = 6;
     */
    MAILING_LIST = 6,
    /**
     * Social media account
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_SOCIAL = 7;
     */
    SOCIAL = 7,
    /**
     * Real-time chat platform
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_CHAT = 8;
     */
    CHAT = 8,
    /**
     * Documentation, guides, or how-to instructions
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_DOCUMENTATION = 9;
     */
    DOCUMENTATION = 9,
    /**
     * Community or commercial support
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_SUPPORT = 10;
     */
    SUPPORT = 10,
    /**
     * Direct or repository download location
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_DISTRIBUTION = 11;
     */
    DISTRIBUTION = 11,
    /**
     * The URL to the license file. If a license URL has been defined in the license node, it should also be defined as an external reference for completeness
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_LICENSE = 12;
     */
    LICENSE = 12,
    /**
     * Build-system specific meta file (i.e. pom.xml, package.json, .nuspec, etc)
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_BUILD_META = 13;
     */
    BUILD_META = 13,
    /**
     * URL to an automated build system
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_BUILD_SYSTEM = 14;
     */
    BUILD_SYSTEM = 14,
    /**
     * Specifies a way to contact the maintainer, supplier, or provider in the event of a security incident. Common URIs include links to a disclosure procedure, a mailto (RFC-2368) that specifies an email address, a tel (RFC-3966) that specifies a phone number, or dns (RFC-4501]) that specifies the records containing DNS Security TXT.
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_SECURITY_CONTACT = 15;
     */
    SECURITY_CONTACT = 15,
    /**
     * Human or machine-readable statements containing facts, evidence, or testimony
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_ATTESTATION = 16;
     */
    ATTESTATION = 16,
    /**
     * An enumeration of identified weaknesses, threats, and countermeasures, dataflow diagram (DFD), attack tree, and other supporting documentation in human-readable or machine-readable format
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_THREAT_MODEL = 17;
     */
    THREAT_MODEL = 17,
    /**
     * The defined assumptions, goals, and capabilities of an adversary.
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_ADVERSARY_MODEL = 18;
     */
    ADVERSARY_MODEL = 18,
    /**
     * Identifies and analyzes the potential of future events that may negatively impact individuals, assets, and/or the environment. Risk assessments may also include judgments on the tolerability of each risk.
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_RISK_ASSESSMENT = 19;
     */
    RISK_ASSESSMENT = 19,
    /**
     * The location where a component was published to. This is often the same as "distribution" but may also include specialized publishing processes that act as an intermediary
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_DISTRIBUTION_INTAKE = 20;
     */
    DISTRIBUTION_INTAKE = 20,
    /**
     * A Vulnerability Disclosure Report (VDR) which asserts the known and previously unknown vulnerabilities that affect a component, service, or product including the analysis and findings describing the impact (or lack of impact) that the reported vulnerability has on a component, service, or product
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_VULNERABILITY_ASSERTION = 21;
     */
    VULNERABILITY_ASSERTION = 21,
    /**
     * A Vulnerability Exploitability eXchange (VEX) which asserts the known vulnerabilities that do not affect a product, product family, or organization, and optionally the ones that do. The VEX should include the analysis and findings describing the impact (or lack of impact) that the reported vulnerability has on the product, product family, or organization
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_EXPLOITABILITY_STATEMENT = 22;
     */
    EXPLOITABILITY_STATEMENT = 22,
    /**
     * Results from an authorized simulated cyberattack on a component or service, otherwise known as a penetration test
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_PENTEST_REPORT = 23;
     */
    PENTEST_REPORT = 23,
    /**
     * SARIF or proprietary machine or human-readable report for which static analysis has identified code quality, security, and other potential issues with the source code
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_STATIC_ANALYSIS_REPORT = 24;
     */
    STATIC_ANALYSIS_REPORT = 24,
    /**
     * Dynamic analysis report that has identified issues such as vulnerabilities and misconfigurations
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_DYNAMIC_ANALYSIS_REPORT = 25;
     */
    DYNAMIC_ANALYSIS_REPORT = 25,
    /**
     * Report generated by analyzing the call stack of a running application
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_RUNTIME_ANALYSIS_REPORT = 26;
     */
    RUNTIME_ANALYSIS_REPORT = 26,
    /**
     * Report generated by Software Composition Analysis (SCA), container analysis, or other forms of component analysis
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_COMPONENT_ANALYSIS_REPORT = 27;
     */
    COMPONENT_ANALYSIS_REPORT = 27,
    /**
     * Report containing a formal assessment of an organization, business unit, or team against a maturity model
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_MATURITY_REPORT = 28;
     */
    MATURITY_REPORT = 28,
    /**
     * Industry, regulatory, or other certification from an accredited (if applicable) certification body
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_CERTIFICATION_REPORT = 29;
     */
    CERTIFICATION_REPORT = 29,
    /**
     * Report or system in which quality metrics can be obtained
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_QUALITY_METRICS = 30;
     */
    QUALITY_METRICS = 30,
    /**
     * Code or configuration that defines and provisions virtualized infrastructure, commonly referred to as Infrastructure as Code (IaC)
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_CODIFIED_INFRASTRUCTURE = 31;
     */
    CODIFIED_INFRASTRUCTURE = 31,
    /**
     * A model card describes the intended uses of a machine learning model, potential limitations, biases, ethical considerations, training parameters, datasets used to train the model, performance metrics, and other relevant data useful for ML transparency.
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_MODEL_CARD = 32;
     */
    MODEL_CARD = 32,
    /**
     * Plans of Action and Milestones (POAM) compliment an "attestation" external reference. POAM is defined by NIST as a "document that identifies tasks needing to be accomplished. It details resources required to accomplish the elements of the plan, any milestones in meeting the tasks and scheduled completion dates for the milestones".
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_POAM = 33;
     */
    POAM = 33,
    /**
     * A record of events that occurred in a computer system or application, such as problems, errors, or information on current operations.
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_LOG = 34;
     */
    LOG = 34,
    /**
     * Parameters or settings that may be used by other components or services.
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_CONFIGURATION = 35;
     */
    CONFIGURATION = 35,
    /**
     * Information used to substantiate a claim.
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_EVIDENCE = 36;
     */
    EVIDENCE = 36,
    /**
     * Describes how a component or service was manufactured or deployed.
     *
     * @generated from enum value: EXTERNAL_REFERENCE_TYPE_FORMULATION = 37;
     */
    FORMULATION = 37
}
/**
 * @generated from enum cyclonedx.v1_5.HashAlg
 */
export declare enum HashAlg {
    /**
     * @generated from enum value: HASH_ALG_NULL = 0;
     */
    NULL = 0,
    /**
     * @generated from enum value: HASH_ALG_MD_5 = 1;
     */
    MD_5 = 1,
    /**
     * @generated from enum value: HASH_ALG_SHA_1 = 2;
     */
    SHA_1 = 2,
    /**
     * @generated from enum value: HASH_ALG_SHA_256 = 3;
     */
    SHA_256 = 3,
    /**
     * @generated from enum value: HASH_ALG_SHA_384 = 4;
     */
    SHA_384 = 4,
    /**
     * @generated from enum value: HASH_ALG_SHA_512 = 5;
     */
    SHA_512 = 5,
    /**
     * @generated from enum value: HASH_ALG_SHA_3_256 = 6;
     */
    SHA_3_256 = 6,
    /**
     * @generated from enum value: HASH_ALG_SHA_3_384 = 7;
     */
    SHA_3_384 = 7,
    /**
     * @generated from enum value: HASH_ALG_SHA_3_512 = 8;
     */
    SHA_3_512 = 8,
    /**
     * @generated from enum value: HASH_ALG_BLAKE_2_B_256 = 9;
     */
    BLAKE_2_B_256 = 9,
    /**
     * @generated from enum value: HASH_ALG_BLAKE_2_B_384 = 10;
     */
    BLAKE_2_B_384 = 10,
    /**
     * @generated from enum value: HASH_ALG_BLAKE_2_B_512 = 11;
     */
    BLAKE_2_B_512 = 11,
    /**
     * @generated from enum value: HASH_ALG_BLAKE_3 = 12;
     */
    BLAKE_3 = 12
}
/**
 * @generated from enum cyclonedx.v1_5.IssueClassification
 */
export declare enum IssueClassification {
    /**
     * @generated from enum value: ISSUE_CLASSIFICATION_NULL = 0;
     */
    NULL = 0,
    /**
     * A fault, flaw, or bug in software
     *
     * @generated from enum value: ISSUE_CLASSIFICATION_DEFECT = 1;
     */
    DEFECT = 1,
    /**
     * A new feature or behavior in software
     *
     * @generated from enum value: ISSUE_CLASSIFICATION_ENHANCEMENT = 2;
     */
    ENHANCEMENT = 2,
    /**
     * A special type of defect which impacts security
     *
     * @generated from enum value: ISSUE_CLASSIFICATION_SECURITY = 3;
     */
    SECURITY = 3
}
/**
 * @generated from enum cyclonedx.v1_5.LicensingTypeEnum
 */
export declare enum LicensingTypeEnum {
    /**
     * @generated from enum value: LICENSING_TYPE_NULL = 0;
     */
    LICENSING_TYPE_NULL = 0,
    /**
     * A license that grants use of software solely for the purpose of education or research.
     *
     * @generated from enum value: LICENSING_TYPE_ACADEMIC = 1;
     */
    LICENSING_TYPE_ACADEMIC = 1,
    /**
     * A license covering use of software embedded in a specific piece of hardware.
     *
     * @generated from enum value: LICENSING_TYPE_APPLIANCE = 2;
     */
    LICENSING_TYPE_APPLIANCE = 2,
    /**
     * A Client Access License (CAL) allows client computers to access services provided by server software.
     *
     * @generated from enum value: LICENSING_TYPE_CLIENT_ACCESS = 3;
     */
    LICENSING_TYPE_CLIENT_ACCESS = 3,
    /**
     * A Concurrent User license (aka floating license) limits the number of licenses for a software application and licenses are shared among a larger number of users.
     *
     * @generated from enum value: LICENSING_TYPE_CONCURRENT_USER = 4;
     */
    LICENSING_TYPE_CONCURRENT_USER = 4,
    /**
     * A license where the core of a computer's processor is assigned a specific number of points.
     *
     * @generated from enum value: LICENSING_TYPE_CORE_POINTS = 5;
     */
    LICENSING_TYPE_CORE_POINTS = 5,
    /**
     * A license for which consumption is measured by non-standard metrics.
     *
     * @generated from enum value: LICENSING_TYPE_CUSTOM_METRIC = 6;
     */
    LICENSING_TYPE_CUSTOM_METRIC = 6,
    /**
     * A license that covers a defined number of installations on computers and other types of devices.
     *
     * @generated from enum value: LICENSING_TYPE_DEVICE = 7;
     */
    LICENSING_TYPE_DEVICE = 7,
    /**
     * A license that grants permission to install and use software for trial purposes.
     *
     * @generated from enum value: LICENSING_TYPE_EVALUATION = 8;
     */
    LICENSING_TYPE_EVALUATION = 8,
    /**
     * A license that grants access to the software to one or more pre-defined users.
     *
     * @generated from enum value: LICENSING_TYPE_NAMED_USER = 9;
     */
    LICENSING_TYPE_NAMED_USER = 9,
    /**
     * A license that grants access to the software on one or more pre-defined computers or devices.
     *
     * @generated from enum value: LICENSING_TYPE_NODE_LOCKED = 10;
     */
    LICENSING_TYPE_NODE_LOCKED = 10,
    /**
     * An Original Equipment Manufacturer license that is delivered with hardware, cannot be transferred to other hardware, and is valid for the life of the hardware.
     *
     * @generated from enum value: LICENSING_TYPE_OEM = 11;
     */
    LICENSING_TYPE_OEM = 11,
    /**
     * A license where the software is sold on a one-time basis and the licensee can use a copy of the software indefinitely.
     *
     * @generated from enum value: LICENSING_TYPE_PERPETUAL = 12;
     */
    LICENSING_TYPE_PERPETUAL = 12,
    /**
     * A license where each installation consumes points per processor.
     *
     * @generated from enum value: LICENSING_TYPE_PROCESSOR_POINTS = 13;
     */
    LICENSING_TYPE_PROCESSOR_POINTS = 13,
    /**
     * A license where the licensee pays a fee to use the software or service.
     *
     * @generated from enum value: LICENSING_TYPE_SUBSCRIPTION = 14;
     */
    LICENSING_TYPE_SUBSCRIPTION = 14,
    /**
     * A license that grants access to the software or service by a specified number of users.
     *
     * @generated from enum value: LICENSING_TYPE_USER = 15;
     */
    LICENSING_TYPE_USER = 15,
    /**
     * Another license type.
     *
     * @generated from enum value: LICENSING_TYPE_OTHER = 16;
     */
    LICENSING_TYPE_OTHER = 16
}
/**
 * @generated from enum cyclonedx.v1_5.LifecyclePhase
 */
export declare enum LifecyclePhase {
    /**
     * BOM produced early in the development lifecycle containing inventory of components and services that are proposed or planned to be used. The inventory may need to be procured, retrieved, or resourced prior to use.
     *
     * @generated from enum value: LIFECYCLE_PHASE_DESIGN = 0;
     */
    DESIGN = 0,
    /**
     * BOM consisting of information obtained prior to a build process and may contain source files and development artifacts and manifests. The inventory may need to be resolved and retrieved prior to use.
     *
     * @generated from enum value: LIFECYCLE_PHASE_PRE_BUILD = 1;
     */
    PRE_BUILD = 1,
    /**
     * BOM consisting of information obtained during a build process where component inventory is available for use. The precise versions of resolved components are usually available at this time as well as the provenance of where the components were retrieved from.
     *
     * @generated from enum value: LIFECYCLE_PHASE_BUILD = 2;
     */
    BUILD = 2,
    /**
     * BOM consisting of information obtained after a build process has completed and the resulting components(s) are available for further analysis. Built components may exist as the result of a CI/CD process, may have been installed or deployed to a system or device, and may need to be retrieved or extracted from the system or device.
     *
     * @generated from enum value: LIFECYCLE_PHASE_POST_BUILD = 3;
     */
    POST_BUILD = 3,
    /**
     * BOM produced that represents inventory that is running and operational. This may include staging or production environments and will generally encompass multiple SBOMs describing the applications and operating system, along with HBOMs describing the hardware that makes up the system. Operations Bill of Materials (OBOM) can provide full-stack inventory of runtime environments, configurations, and additional dependencies.
     *
     * @generated from enum value: LIFECYCLE_PHASE_OPERATIONS = 4;
     */
    OPERATIONS = 4,
    /**
     * BOM consisting of information observed through network discovery providing point-in-time enumeration of embedded, on-premise, and cloud-native services such as server applications, connected devices, microservices, and serverless functions.
     *
     * @generated from enum value: LIFECYCLE_PHASE_DISCOVERY = 5;
     */
    DISCOVERY = 5,
    /**
     * BOM containing inventory that will be, or has been retired from operations.
     *
     * @generated from enum value: LIFECYCLE_PHASE_DECOMMISSION = 6;
     */
    DECOMMISSION = 6
}
/**
 * @generated from enum cyclonedx.v1_5.PatchClassification
 */
export declare enum PatchClassification {
    /**
     * @generated from enum value: PATCH_CLASSIFICATION_NULL = 0;
     */
    NULL = 0,
    /**
     * A patch which is not developed by the creators or maintainers of the software being patched. Refer to https://en.wikipedia.org/wiki/Unofficial_patch
     *
     * @generated from enum value: PATCH_CLASSIFICATION_UNOFFICIAL = 1;
     */
    UNOFFICIAL = 1,
    /**
     * A patch which dynamically modifies runtime behavior. Refer to https://en.wikipedia.org/wiki/Monkey_patch
     *
     * @generated from enum value: PATCH_CLASSIFICATION_MONKEY = 2;
     */
    MONKEY = 2,
    /**
     * A patch which takes code from a newer version of software and applies it to older versions of the same software. Refer to https://en.wikipedia.org/wiki/Backporting
     *
     * @generated from enum value: PATCH_CLASSIFICATION_BACKPORT = 3;
     */
    BACKPORT = 3,
    /**
     * A patch created by selectively applying commits from other versions or branches of the same software.
     *
     * @generated from enum value: PATCH_CLASSIFICATION_CHERRY_PICK = 4;
     */
    CHERRY_PICK = 4
}
/**
 * @generated from enum cyclonedx.v1_5.Scope
 */
export declare enum Scope {
    /**
     * Default
     *
     * @generated from enum value: SCOPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The component is required for runtime
     *
     * @generated from enum value: SCOPE_REQUIRED = 1;
     */
    REQUIRED = 1,
    /**
     * The component is optional at runtime. Optional components are components that are not capable of being called due to them not be installed or otherwise accessible by any means. Components that are installed but due to configuration or other restrictions are prohibited from being called must be scoped as 'required'.
     *
     * @generated from enum value: SCOPE_OPTIONAL = 2;
     */
    OPTIONAL = 2,
    /**
     * Components that are excluded provide the ability to document component usage for test and other non-runtime purposes. Excluded components are not reachable within a call graph at runtime.
     *
     * @generated from enum value: SCOPE_EXCLUDED = 3;
     */
    EXCLUDED = 3
}
/**
 * @generated from enum cyclonedx.v1_5.Aggregate
 */
export declare enum Aggregate {
    /**
     * The relationship completeness is not specified.
     *
     * @generated from enum value: AGGREGATE_NOT_SPECIFIED = 0;
     */
    NOT_SPECIFIED = 0,
    /**
     * The relationship is complete. No further relationships including constituent components, services, or dependencies are known to exist.
     *
     * @generated from enum value: AGGREGATE_COMPLETE = 1;
     */
    COMPLETE = 1,
    /**
     * The relationship is incomplete. Additional relationships exist and may include constituent components, services, or dependencies.
     *
     * @generated from enum value: AGGREGATE_INCOMPLETE = 2;
     */
    INCOMPLETE = 2,
    /**
     * The relationship is incomplete. Only relationships for first-party components, services, or their dependencies are represented.
     *
     * @generated from enum value: AGGREGATE_INCOMPLETE_FIRST_PARTY_ONLY = 3;
     */
    INCOMPLETE_FIRST_PARTY_ONLY = 3,
    /**
     * The relationship is incomplete. Only relationships for third-party components, services, or their dependencies are represented.
     *
     * @generated from enum value: AGGREGATE_INCOMPLETE_THIRD_PARTY_ONLY = 4;
     */
    INCOMPLETE_THIRD_PARTY_ONLY = 4,
    /**
     * The relationship may be complete or incomplete. This usually signifies a 'best-effort' to obtain constituent components, services, or dependencies but the completeness is inconclusive.
     *
     * @generated from enum value: AGGREGATE_UNKNOWN = 5;
     */
    UNKNOWN = 5,
    /**
     * The relationship is incomplete. Only relationships for first-party components, services, or their dependencies are represented, limited specifically to those that are proprietary.
     *
     * @generated from enum value: AGGREGATE_INCOMPLETE_FIRST_PARTY_PROPRIETARY_ONLY = 6;
     */
    INCOMPLETE_FIRST_PARTY_PROPRIETARY_ONLY = 6,
    /**
     * The relationship is incomplete. Only relationships for first-party components, services, or their dependencies are represented, limited specifically to those that are opensource.
     *
     * @generated from enum value: AGGREGATE_INCOMPLETE_FIRST_PARTY_OPENSOURCE_ONLY = 7;
     */
    INCOMPLETE_FIRST_PARTY_OPENSOURCE_ONLY = 7,
    /**
     * The relationship is incomplete. Only relationships for third-party components, services, or their dependencies are represented, limited specifically to those that are proprietary.
     *
     * @generated from enum value: AGGREGATE_INCOMPLETE_THIRD_PARTY_PROPRIETARY_ONLY = 8;
     */
    INCOMPLETE_THIRD_PARTY_PROPRIETARY_ONLY = 8,
    /**
     * The relationship is incomplete. Only relationships for third-party components, services, or their dependencies are represented, limited specifically to those that are opensource.
     *
     * @generated from enum value: AGGREGATE_INCOMPLETE_THIRD_PARTY_OPENSOURCE_ONLY = 9;
     */
    INCOMPLETE_THIRD_PARTY_OPENSOURCE_ONLY = 9
}
/**
 * @generated from enum cyclonedx.v1_5.EvidenceFieldType
 */
export declare enum EvidenceFieldType {
    /**
     * @generated from enum value: EVIDENCE_FIELD_NULL = 0;
     */
    EVIDENCE_FIELD_NULL = 0,
    /**
     * @generated from enum value: EVIDENCE_FIELD_GROUP = 1;
     */
    EVIDENCE_FIELD_GROUP = 1,
    /**
     * @generated from enum value: EVIDENCE_FIELD_NAME = 2;
     */
    EVIDENCE_FIELD_NAME = 2,
    /**
     * @generated from enum value: EVIDENCE_FIELD_VERSION = 3;
     */
    EVIDENCE_FIELD_VERSION = 3,
    /**
     * @generated from enum value: EVIDENCE_FIELD_PURL = 4;
     */
    EVIDENCE_FIELD_PURL = 4,
    /**
     * @generated from enum value: EVIDENCE_FIELD_CPE = 5;
     */
    EVIDENCE_FIELD_CPE = 5,
    /**
     * @generated from enum value: EVIDENCE_FIELD_SWID = 6;
     */
    EVIDENCE_FIELD_SWID = 6,
    /**
     * @generated from enum value: EVIDENCE_FIELD_HASH = 7;
     */
    EVIDENCE_FIELD_HASH = 7
}
/**
 * @generated from enum cyclonedx.v1_5.EvidenceTechnique
 */
export declare enum EvidenceTechnique {
    /**
     * @generated from enum value: EVIDENCE_TECHNIQUE_SOURCE_CODE_ANALYSIS = 0;
     */
    SOURCE_CODE_ANALYSIS = 0,
    /**
     * @generated from enum value: EVIDENCE_TECHNIQUE_BINARY_ANALYSIS = 1;
     */
    BINARY_ANALYSIS = 1,
    /**
     * @generated from enum value: EVIDENCE_TECHNIQUE_MANIFEST_ANALYSIS = 2;
     */
    MANIFEST_ANALYSIS = 2,
    /**
     * @generated from enum value: EVIDENCE_TECHNIQUE_AST_FINGERPRINT = 3;
     */
    AST_FINGERPRINT = 3,
    /**
     * @generated from enum value: EVIDENCE_TECHNIQUE_HASH_COMPARISON = 4;
     */
    HASH_COMPARISON = 4,
    /**
     * @generated from enum value: EVIDENCE_TECHNIQUE_INSTRUMENTATION = 5;
     */
    INSTRUMENTATION = 5,
    /**
     * @generated from enum value: EVIDENCE_TECHNIQUE_DYNAMIC_ANALYSIS = 6;
     */
    DYNAMIC_ANALYSIS = 6,
    /**
     * @generated from enum value: EVIDENCE_TECHNIQUE_FILENAME = 7;
     */
    FILENAME = 7,
    /**
     * @generated from enum value: EVIDENCE_TECHNIQUE_ATTESTATION = 8;
     */
    ATTESTATION = 8,
    /**
     * @generated from enum value: EVIDENCE_TECHNIQUE_OTHER = 9;
     */
    OTHER = 9
}
/**
 * @generated from enum cyclonedx.v1_5.Severity
 */
export declare enum Severity {
    /**
     * @generated from enum value: SEVERITY_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from enum value: SEVERITY_CRITICAL = 1;
     */
    CRITICAL = 1,
    /**
     * @generated from enum value: SEVERITY_HIGH = 2;
     */
    HIGH = 2,
    /**
     * @generated from enum value: SEVERITY_MEDIUM = 3;
     */
    MEDIUM = 3,
    /**
     * @generated from enum value: SEVERITY_LOW = 4;
     */
    LOW = 4,
    /**
     * @generated from enum value: SEVERITY_INFO = 5;
     */
    INFO = 5,
    /**
     * @generated from enum value: SEVERITY_NONE = 6;
     */
    NONE = 6
}
/**
 * @generated from enum cyclonedx.v1_5.ScoreMethod
 */
export declare enum ScoreMethod {
    /**
     * An undefined score method
     *
     * @generated from enum value: SCORE_METHOD_NULL = 0;
     */
    NULL = 0,
    /**
     * Common Vulnerability Scoring System v2 - https://www.first.org/cvss/v2/
     *
     * @generated from enum value: SCORE_METHOD_CVSSV2 = 1;
     */
    CVSSV2 = 1,
    /**
     * Common Vulnerability Scoring System v3 - https://www.first.org/cvss/v3-0/
     *
     * @generated from enum value: SCORE_METHOD_CVSSV3 = 2;
     */
    CVSSV3 = 2,
    /**
     * Common Vulnerability Scoring System v3.1 - https://www.first.org/cvss/v3-1/
     *
     * @generated from enum value: SCORE_METHOD_CVSSV31 = 3;
     */
    CVSSV31 = 3,
    /**
     * OWASP Risk Rating Methodology - https://owasp.org/www-community/OWASP_Risk_Rating_Methodology
     *
     * @generated from enum value: SCORE_METHOD_OWASP = 4;
     */
    OWASP = 4,
    /**
     * Other scoring method
     *
     * @generated from enum value: SCORE_METHOD_OTHER = 5;
     */
    OTHER = 5,
    /**
     * Common Vulnerability Scoring System v3.1 - https://www.first.org/cvss/v4-0/
     *
     * @generated from enum value: SCORE_METHOD_CVSSV4 = 6;
     */
    CVSSV4 = 6,
    /**
     * Stakeholder Specific Vulnerability Categorization (all versions) - https://github.com/CERTCC/SSVC
     *
     * @generated from enum value: SCORE_METHOD_SSVC = 7;
     */
    SSVC = 7
}
/**
 * @generated from enum cyclonedx.v1_5.ImpactAnalysisState
 */
export declare enum ImpactAnalysisState {
    /**
     * An undefined impact analysis state
     *
     * @generated from enum value: IMPACT_ANALYSIS_STATE_NULL = 0;
     */
    NULL = 0,
    /**
     * The vulnerability has been remediated.
     *
     * @generated from enum value: IMPACT_ANALYSIS_STATE_RESOLVED = 1;
     */
    RESOLVED = 1,
    /**
     * The vulnerability has been remediated and evidence of the changes are provided in the affected components pedigree containing verifiable commit history and/or diff(s).
     *
     * @generated from enum value: IMPACT_ANALYSIS_STATE_RESOLVED_WITH_PEDIGREE = 2;
     */
    RESOLVED_WITH_PEDIGREE = 2,
    /**
     * The vulnerability may be directly or indirectly exploitable.
     *
     * @generated from enum value: IMPACT_ANALYSIS_STATE_EXPLOITABLE = 3;
     */
    EXPLOITABLE = 3,
    /**
     * The vulnerability is being investigated.
     *
     * @generated from enum value: IMPACT_ANALYSIS_STATE_IN_TRIAGE = 4;
     */
    IN_TRIAGE = 4,
    /**
     * The vulnerability is not specific to the component or service and was falsely identified or associated.
     *
     * @generated from enum value: IMPACT_ANALYSIS_STATE_FALSE_POSITIVE = 5;
     */
    FALSE_POSITIVE = 5,
    /**
     * The component or service is not affected by the vulnerability. Justification should be specified for all not_affected cases.
     *
     * @generated from enum value: IMPACT_ANALYSIS_STATE_NOT_AFFECTED = 6;
     */
    NOT_AFFECTED = 6
}
/**
 * @generated from enum cyclonedx.v1_5.ImpactAnalysisJustification
 */
export declare enum ImpactAnalysisJustification {
    /**
     * An undefined impact analysis justification
     *
     * @generated from enum value: IMPACT_ANALYSIS_JUSTIFICATION_NULL = 0;
     */
    NULL = 0,
    /**
     * The code has been removed or tree-shaked.
     *
     * @generated from enum value: IMPACT_ANALYSIS_JUSTIFICATION_CODE_NOT_PRESENT = 1;
     */
    CODE_NOT_PRESENT = 1,
    /**
     * The vulnerable code is not invoked at runtime.
     *
     * @generated from enum value: IMPACT_ANALYSIS_JUSTIFICATION_CODE_NOT_REACHABLE = 2;
     */
    CODE_NOT_REACHABLE = 2,
    /**
     * Exploitability requires a configurable option to be set/unset.
     *
     * @generated from enum value: IMPACT_ANALYSIS_JUSTIFICATION_REQUIRES_CONFIGURATION = 3;
     */
    REQUIRES_CONFIGURATION = 3,
    /**
     * Exploitability requires a dependency that is not present.
     *
     * @generated from enum value: IMPACT_ANALYSIS_JUSTIFICATION_REQUIRES_DEPENDENCY = 4;
     */
    REQUIRES_DEPENDENCY = 4,
    /**
     * Exploitability requires a certain environment which is not present.
     *
     * @generated from enum value: IMPACT_ANALYSIS_JUSTIFICATION_REQUIRES_ENVIRONMENT = 5;
     */
    REQUIRES_ENVIRONMENT = 5,
    /**
     * Exploitability requires a compiler flag to be set/unset.
     *
     * @generated from enum value: IMPACT_ANALYSIS_JUSTIFICATION_PROTECTED_BY_COMPILER = 6;
     */
    PROTECTED_BY_COMPILER = 6,
    /**
     * Exploits are prevented at runtime.
     *
     * @generated from enum value: IMPACT_ANALYSIS_JUSTIFICATION_PROTECTED_AT_RUNTIME = 7;
     */
    PROTECTED_AT_RUNTIME = 7,
    /**
     * Attacks are blocked at physical, logical, or network perimeter.
     *
     * @generated from enum value: IMPACT_ANALYSIS_JUSTIFICATION_PROTECTED_AT_PERIMETER = 8;
     */
    PROTECTED_AT_PERIMETER = 8,
    /**
     * Preventative measures have been implemented that reduce the likelihood and/or impact of the vulnerability.
     *
     * @generated from enum value: IMPACT_ANALYSIS_JUSTIFICATION_PROTECTED_BY_MITIGATING_CONTROL = 9;
     */
    PROTECTED_BY_MITIGATING_CONTROL = 9
}
/**
 * @generated from enum cyclonedx.v1_5.VulnerabilityResponse
 */
export declare enum VulnerabilityResponse {
    /**
     * @generated from enum value: VULNERABILITY_RESPONSE_NULL = 0;
     */
    NULL = 0,
    /**
     * @generated from enum value: VULNERABILITY_RESPONSE_CAN_NOT_FIX = 1;
     */
    CAN_NOT_FIX = 1,
    /**
     * @generated from enum value: VULNERABILITY_RESPONSE_WILL_NOT_FIX = 2;
     */
    WILL_NOT_FIX = 2,
    /**
     * @generated from enum value: VULNERABILITY_RESPONSE_UPDATE = 3;
     */
    UPDATE = 3,
    /**
     * @generated from enum value: VULNERABILITY_RESPONSE_ROLLBACK = 4;
     */
    ROLLBACK = 4,
    /**
     * @generated from enum value: VULNERABILITY_RESPONSE_WORKAROUND_AVAILABLE = 5;
     */
    WORKAROUND_AVAILABLE = 5
}
/**
 * @generated from enum cyclonedx.v1_5.VulnerabilityAffectedStatus
 */
export declare enum VulnerabilityAffectedStatus {
    /**
     * The vulnerability status of a given version or range of versions of a product. The statuses 'affected' and 'unaffected' indicate that the version is affected or unaffected by the vulnerability. The status 'unknown' indicates that it is unknown or unspecified whether the given version is affected. There can be many reasons for an 'unknown' status, including that an investigation has not been undertaken or that a vendor has not disclosed the status.
     *
     * @generated from enum value: VULNERABILITY_AFFECTED_STATUS_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from enum value: VULNERABILITY_AFFECTED_STATUS_AFFECTED = 1;
     */
    AFFECTED = 1,
    /**
     * @generated from enum value: VULNERABILITY_AFFECTED_STATUS_NOT_AFFECTED = 2;
     */
    NOT_AFFECTED = 2
}
/**
 * @generated from enum cyclonedx.v1_5.ModelParameterApproachType
 */
export declare enum ModelParameterApproachType {
    /**
     * @generated from enum value: MODEL_PARAMETER_APPROACH_TYPE_SUPERVISED = 0;
     */
    SUPERVISED = 0,
    /**
     * @generated from enum value: MODEL_PARAMETER_APPROACH_TYPE_UNSUPERVISED = 1;
     */
    UNSUPERVISED = 1,
    /**
     * @generated from enum value: MODEL_PARAMETER_APPROACH_TYPE_REINFORCED_LEARNING = 2;
     */
    REINFORCED_LEARNING = 2,
    /**
     * @generated from enum value: MODEL_PARAMETER_APPROACH_TYPE_SEMI_SUPERVISED = 3;
     */
    SEMI_SUPERVISED = 3,
    /**
     * @generated from enum value: MODEL_PARAMETER_APPROACH_TYPE_SELF_SUPERVISED = 4;
     */
    SELF_SUPERVISED = 4
}
/**
 * @generated from enum cyclonedx.v1_5.ComponentDataType
 */
export declare enum ComponentDataType {
    /**
     * Any type of code, code snippet, or data-as-code
     *
     * @generated from enum value: COMPONENT_DATA_TYPE_SOURCE_CODE = 0;
     */
    SOURCE_CODE = 0,
    /**
     * Parameters or settings that may be used by other components.
     *
     * @generated from enum value: COMPONENT_DATA_TYPE_CONFIGURATION = 1;
     */
    CONFIGURATION = 1,
    /**
     * A collection of data.
     *
     * @generated from enum value: COMPONENT_DATA_TYPE_DATASET = 2;
     */
    DATASET = 2,
    /**
     * Data that can be used to create new instances of what the definition defines.
     *
     * @generated from enum value: COMPONENT_DATA_TYPE_DEFINITION = 3;
     */
    DEFINITION = 3,
    /**
     * Any other type of data that does not fit into existing definitions.
     *
     * @generated from enum value: COMPONENT_DATA_TYPE_OTHER = 4;
     */
    OTHER = 4
}
/**
 * @generated from enum cyclonedx.v1_5.TaskType
 */
export declare enum TaskType {
    /**
     * @generated from enum value: TASK_TYPE_COPY = 0;
     */
    COPY = 0,
    /**
     * @generated from enum value: TASK_TYPE_CLONE = 1;
     */
    CLONE = 1,
    /**
     * @generated from enum value: TASK_TYPE_LINT = 2;
     */
    LINT = 2,
    /**
     * @generated from enum value: TASK_TYPE_SCAN = 3;
     */
    SCAN = 3,
    /**
     * @generated from enum value: TASK_TYPE_MERGE = 4;
     */
    MERGE = 4,
    /**
     * @generated from enum value: TASK_TYPE_BUILD = 5;
     */
    BUILD = 5,
    /**
     * @generated from enum value: TASK_TYPE_TEST = 6;
     */
    TEST = 6,
    /**
     * @generated from enum value: TASK_TYPE_DELIVER = 7;
     */
    DELIVER = 7,
    /**
     * @generated from enum value: TASK_TYPE_DEPLOY = 8;
     */
    DEPLOY = 8,
    /**
     * @generated from enum value: TASK_TYPE_RELEASE = 9;
     */
    RELEASE = 9,
    /**
     * @generated from enum value: TASK_TYPE_CLEAN = 10;
     */
    CLEAN = 10,
    /**
     * @generated from enum value: TASK_TYPE_OTHER = 11;
     */
    OTHER = 11
}
/**
 * Specifies attributes of the text
 *
 * @generated from message cyclonedx.v1_5.AttachedText
 */
export declare class AttachedText extends Message<AttachedText> {
    /**
     * Specifies the content type of the text. Defaults to 'text/plain' if not specified.
     *
     * @generated from field: optional string content_type = 1;
     */
    contentType?: string;
    /**
     * Specifies the optional encoding the text is represented in
     *
     * @generated from field: optional string encoding = 2;
     */
    encoding?: string;
    /**
     * SimpleContent value of element. Proactive controls such as input validation and sanitization should be employed to prevent misuse of attachment text.
     *
     * @generated from field: string value = 3;
     */
    value: string;
    constructor(data?: PartialMessage<AttachedText>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.AttachedText";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttachedText;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttachedText;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttachedText;
    static equals(a: AttachedText | PlainMessage<AttachedText> | undefined, b: AttachedText | PlainMessage<AttachedText> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Bom
 */
export declare class Bom extends Message<Bom> {
    /**
     * The version of the CycloneDX specification a BOM is written to (starting at version 1.3)
     *
     * @generated from field: string spec_version = 1;
     */
    specVersion: string;
    /**
     * The version allows component publishers/authors to make changes to existing BOMs to update various aspects of the document such as description or licenses. When a system is presented with multiple BOMs for the same component, the system should use the most recent version of the BOM. The default version is '1' and should be incremented for each version of the BOM that is published. Each version of a component should have a unique BOM and if no changes are made to the BOMs, then each BOM will have a version of '1'.
     *
     * @generated from field: optional int32 version = 2;
     */
    version?: number;
    /**
     * Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
     *
     * @generated from field: optional string serial_number = 3;
     */
    serialNumber?: string;
    /**
     * Provides additional information about a BOM.
     *
     * @generated from field: optional cyclonedx.v1_5.Metadata metadata = 4;
     */
    metadata?: Metadata;
    /**
     * Provides the ability to document a list of components.
     *
     * @generated from field: repeated cyclonedx.v1_5.Component components = 5;
     */
    components: Component[];
    /**
     * Provides the ability to document a list of external services.
     *
     * @generated from field: repeated cyclonedx.v1_5.Service services = 6;
     */
    services: Service[];
    /**
     * Provides the ability to document external references related to the BOM or to the project the BOM describes.
     *
     * @generated from field: repeated cyclonedx.v1_5.ExternalReference external_references = 7;
     */
    externalReferences: ExternalReference[];
    /**
     * Provides the ability to document dependency relationships.
     *
     * @generated from field: repeated cyclonedx.v1_5.Dependency dependencies = 8;
     */
    dependencies: Dependency[];
    /**
     * Compositions describe constituent parts (including components, services, and dependency relationships) and their completeness. The completeness of vulnerabilities expressed in a BOM may also be described.
     *
     * @generated from field: repeated cyclonedx.v1_5.Composition compositions = 9;
     */
    compositions: Composition[];
    /**
     * Vulnerabilities identified in components or services.
     *
     * @generated from field: repeated cyclonedx.v1_5.Vulnerability vulnerabilities = 10;
     */
    vulnerabilities: Vulnerability[];
    /**
     * Comments made by people, organizations, or tools about any object with a bom-ref, such as components, services, vulnerabilities, or the BOM itself. Unlike inventory information, annotations may contain opinion or commentary from various stakeholders.
     *
     * @generated from field: repeated cyclonedx.v1_5.Annotation annotations = 11;
     */
    annotations: Annotation[];
    /**
     * Specifies optional, custom, properties
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 12;
     */
    properties: Property[];
    /**
     * Describes how a component or service was manufactured or deployed. This is achieved through the use of formulas, workflows, tasks, and steps, which declare the precise steps to reproduce along with the observed formulas describing the steps which transpired in the manufacturing process.
     *
     * @generated from field: repeated cyclonedx.v1_5.Formula formulation = 13;
     */
    formulation: Formula[];
    constructor(data?: PartialMessage<Bom>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Bom";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bom;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bom;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bom;
    static equals(a: Bom | PlainMessage<Bom> | undefined, b: Bom | PlainMessage<Bom> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Commit
 */
export declare class Commit extends Message<Commit> {
    /**
     * A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
     *
     * @generated from field: optional string uid = 1;
     */
    uid?: string;
    /**
     * The URL to the commit. This URL will typically point to a commit in a version control system.
     *
     * @generated from field: optional string url = 2;
     */
    url?: string;
    /**
     * The author who created the changes in the commit
     *
     * @generated from field: optional cyclonedx.v1_5.IdentifiableAction author = 3;
     */
    author?: IdentifiableAction;
    /**
     * The person who committed or pushed the commit
     *
     * @generated from field: optional cyclonedx.v1_5.IdentifiableAction committer = 4;
     */
    committer?: IdentifiableAction;
    /**
     * The text description of the contents of the commit
     *
     * @generated from field: optional string message = 5;
     */
    message?: string;
    constructor(data?: PartialMessage<Commit>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Commit";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Commit;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Commit;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Commit;
    static equals(a: Commit | PlainMessage<Commit> | undefined, b: Commit | PlainMessage<Commit> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Component
 */
export declare class Component extends Message<Component> {
    /**
     * Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.
     *
     * @generated from field: cyclonedx.v1_5.Classification type = 1;
     */
    type: Classification;
    /**
     * The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
     *
     * @generated from field: optional string mime_type = 2;
     */
    mimeType?: string;
    /**
     * An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     *
     * @generated from field: optional string bom_ref = 3;
     */
    bomRef?: string;
    /**
     * The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
     *
     * @generated from field: optional cyclonedx.v1_5.OrganizationalEntity supplier = 4;
     */
    supplier?: OrganizationalEntity;
    /**
     * The person(s) or organization(s) that authored the component
     *
     * @generated from field: optional string author = 5;
     */
    author?: string;
    /**
     * The person(s) or organization(s) that published the component
     *
     * @generated from field: optional string publisher = 6;
     */
    publisher?: string;
    /**
     * The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
     *
     * @generated from field: optional string group = 7;
     */
    group?: string;
    /**
     * The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
     *
     * @generated from field: string name = 8;
     */
    name: string;
    /**
     * The component version. The version should ideally comply with semantic versioning but is not enforced. Version was made optional in v1.4 of the spec. For backward compatibility, it is RECOMMENDED to use an empty string to represent components without version information.
     *
     * @generated from field: string version = 9;
     */
    version: string;
    /**
     * Specifies a description for the component
     *
     * @generated from field: optional string description = 10;
     */
    description?: string;
    /**
     * Specifies the scope of the component. If scope is not specified, SCOPE_REQUIRED scope should be assumed by the consumer of the BOM
     *
     * @generated from field: optional cyclonedx.v1_5.Scope scope = 11;
     */
    scope?: Scope;
    /**
     * @generated from field: repeated cyclonedx.v1_5.Hash hashes = 12;
     */
    hashes: Hash[];
    /**
     * @generated from field: repeated cyclonedx.v1_5.LicenseChoice licenses = 13;
     */
    licenses: LicenseChoice[];
    /**
     * An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
     *
     * @generated from field: optional string copyright = 14;
     */
    copyright?: string;
    /**
     * DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
     *
     * @generated from field: optional string cpe = 15;
     */
    cpe?: string;
    /**
     * Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
     *
     * @generated from field: optional string purl = 16;
     */
    purl?: string;
    /**
     * Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
     *
     * @generated from field: optional cyclonedx.v1_5.Swid swid = 17;
     */
    swid?: Swid;
    /**
     * DEPRECATED - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating is the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
     *
     * @generated from field: optional bool modified = 18;
     */
    modified?: boolean;
    /**
     * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
     *
     * @generated from field: optional cyclonedx.v1_5.Pedigree pedigree = 19;
     */
    pedigree?: Pedigree;
    /**
     * Provides the ability to document external references related to the component or to the project the component describes.
     *
     * @generated from field: repeated cyclonedx.v1_5.ExternalReference external_references = 20;
     */
    externalReferences: ExternalReference[];
    /**
     * Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -> subsystem -> parts assembly in physical supply chains.
     *
     * @generated from field: repeated cyclonedx.v1_5.Component components = 21;
     */
    components: Component[];
    /**
     * Specifies optional, custom, properties
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 22;
     */
    properties: Property[];
    /**
     * Specifies optional license and copyright evidence
     *
     * @generated from field: optional cyclonedx.v1_5.Evidence evidence = 23;
     */
    evidence?: Evidence;
    /**
     * Specifies optional release notes.
     *
     * @generated from field: optional cyclonedx.v1_5.ReleaseNotes releaseNotes = 24;
     */
    releaseNotes?: ReleaseNotes;
    /**
     * A model card describes the intended uses of a machine learning model, potential limitations, biases, ethical considerations, training parameters, datasets used to train the model, performance metrics, and other relevant data useful for ML transparency.
     *
     * @generated from field: optional cyclonedx.v1_5.ModelCard modelCard = 25;
     */
    modelCard?: ModelCard;
    /**
     * This object SHOULD be specified for any component of type `data` and MUST NOT be specified for other component types.
     *
     * @generated from field: optional cyclonedx.v1_5.ComponentData data = 26;
     */
    data?: ComponentData;
    constructor(data?: PartialMessage<Component>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Component";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Component;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Component;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Component;
    static equals(a: Component | PlainMessage<Component> | undefined, b: Component | PlainMessage<Component> | undefined): boolean;
}
/**
 * Specifies the data flow.
 *
 * @generated from message cyclonedx.v1_5.DataFlow
 */
export declare class DataFlow extends Message<DataFlow> {
    /**
     * Specifies the flow direction of the data.
     *
     * @generated from field: cyclonedx.v1_5.DataFlowDirection flow = 1;
     */
    flow: DataFlowDirection;
    /**
     * Data classification tags data according to its type, sensitivity, and value if altered, stolen, or destroyed.
     *
     * @generated from field: string value = 2;
     */
    value: string;
    /**
     * Name for the defined data
     *
     * @generated from field: optional string name = 3;
     */
    name?: string;
    /**
     * Short description of the data content and usage
     *
     * @generated from field: optional string description = 4;
     */
    description?: string;
    /**
     * The URI, URL, or BOM-Link of the components or services the data came in from
     *
     * @generated from field: repeated string source = 5;
     */
    source: string[];
    /**
     * The URI, URL, or BOM-Link of the components or services the data is sent to
     *
     * @generated from field: repeated string destination = 6;
     */
    destination: string[];
    /**
     * Data Governance
     *
     * @generated from field: optional cyclonedx.v1_5.DataGovernance governance = 7;
     */
    governance?: DataGovernance;
    constructor(data?: PartialMessage<DataFlow>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.DataFlow";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataFlow;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataFlow;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataFlow;
    static equals(a: DataFlow | PlainMessage<DataFlow> | undefined, b: DataFlow | PlainMessage<DataFlow> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Dependency
 */
export declare class Dependency extends Message<Dependency> {
    /**
     * References a component or service by the its bom-ref attribute
     *
     * @generated from field: string ref = 1;
     */
    ref: string;
    /**
     * @generated from field: repeated cyclonedx.v1_5.Dependency dependencies = 2;
     */
    dependencies: Dependency[];
    constructor(data?: PartialMessage<Dependency>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Dependency";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Dependency;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Dependency;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Dependency;
    static equals(a: Dependency | PlainMessage<Dependency> | undefined, b: Dependency | PlainMessage<Dependency> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Diff
 */
export declare class Diff extends Message<Diff> {
    /**
     * Specifies the optional text of the diff
     *
     * @generated from field: optional cyclonedx.v1_5.AttachedText text = 1;
     */
    text?: AttachedText;
    /**
     * Specifies the URL to the diff
     *
     * @generated from field: optional string url = 2;
     */
    url?: string;
    constructor(data?: PartialMessage<Diff>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Diff";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Diff;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Diff;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Diff;
    static equals(a: Diff | PlainMessage<Diff> | undefined, b: Diff | PlainMessage<Diff> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ExternalReference
 */
export declare class ExternalReference extends Message<ExternalReference> {
    /**
     * Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the "other" type.
     *
     * @generated from field: cyclonedx.v1_5.ExternalReferenceType type = 1;
     */
    type: ExternalReferenceType;
    /**
     * The URL to the external reference
     *
     * @generated from field: string url = 2;
     */
    url: string;
    /**
     * An optional comment describing the external reference
     *
     * @generated from field: optional string comment = 3;
     */
    comment?: string;
    /**
     * Optional integrity hashes for the external resource content
     *
     * @generated from field: repeated cyclonedx.v1_5.Hash hashes = 4;
     */
    hashes: Hash[];
    constructor(data?: PartialMessage<ExternalReference>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ExternalReference";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExternalReference;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExternalReference;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExternalReference;
    static equals(a: ExternalReference | PlainMessage<ExternalReference> | undefined, b: ExternalReference | PlainMessage<ExternalReference> | undefined): boolean;
}
/**
 * Specifies the file hash of the component
 *
 * @generated from message cyclonedx.v1_5.Hash
 */
export declare class Hash extends Message<Hash> {
    /**
     * Specifies the algorithm used to create the hash
     *
     * @generated from field: cyclonedx.v1_5.HashAlg alg = 1;
     */
    alg: HashAlg;
    /**
     * SimpleContent value of element
     *
     * @generated from field: string value = 2;
     */
    value: string;
    constructor(data?: PartialMessage<Hash>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Hash";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Hash;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Hash;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Hash;
    static equals(a: Hash | PlainMessage<Hash> | undefined, b: Hash | PlainMessage<Hash> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.IdentifiableAction
 */
export declare class IdentifiableAction extends Message<IdentifiableAction> {
    /**
     * The timestamp in which the action occurred
     *
     * @generated from field: optional google.protobuf.Timestamp timestamp = 1;
     */
    timestamp?: Timestamp;
    /**
     * The name of the individual who performed the action
     *
     * @generated from field: optional string name = 2;
     */
    name?: string;
    /**
     * The email address of the individual who performed the action
     *
     * @generated from field: optional string email = 3;
     */
    email?: string;
    constructor(data?: PartialMessage<IdentifiableAction>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.IdentifiableAction";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentifiableAction;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentifiableAction;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentifiableAction;
    static equals(a: IdentifiableAction | PlainMessage<IdentifiableAction> | undefined, b: IdentifiableAction | PlainMessage<IdentifiableAction> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Issue
 */
export declare class Issue extends Message<Issue> {
    /**
     * Specifies the type of issue
     *
     * @generated from field: cyclonedx.v1_5.IssueClassification type = 1;
     */
    type: IssueClassification;
    /**
     * The identifier of the issue assigned by the source of the issue
     *
     * @generated from field: optional string id = 2;
     */
    id?: string;
    /**
     * The name of the issue
     *
     * @generated from field: optional string name = 3;
     */
    name?: string;
    /**
     * A description of the issue
     *
     * @generated from field: optional string description = 4;
     */
    description?: string;
    /**
     * @generated from field: optional cyclonedx.v1_5.Source source = 5;
     */
    source?: Source;
    /**
     * @generated from field: repeated string references = 6;
     */
    references: string[];
    constructor(data?: PartialMessage<Issue>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Issue";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Issue;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Issue;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Issue;
    static equals(a: Issue | PlainMessage<Issue> | undefined, b: Issue | PlainMessage<Issue> | undefined): boolean;
}
/**
 * The source of the issue where it is documented.
 *
 * @generated from message cyclonedx.v1_5.Source
 */
export declare class Source extends Message<Source> {
    /**
     * The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
     *
     * @generated from field: optional string name = 1;
     */
    name?: string;
    /**
     * The url of the issue documentation as provided by the source
     *
     * @generated from field: optional string url = 2;
     */
    url?: string;
    constructor(data?: PartialMessage<Source>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Source";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Source;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Source;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Source;
    static equals(a: Source | PlainMessage<Source> | undefined, b: Source | PlainMessage<Source> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.LicenseChoice
 */
export declare class LicenseChoice extends Message<LicenseChoice> {
    /**
     * @generated from oneof cyclonedx.v1_5.LicenseChoice.choice
     */
    choice: {
        /**
         * @generated from field: cyclonedx.v1_5.License license = 1;
         */
        value: License;
        case: "license";
    } | {
        /**
         * @generated from field: string expression = 2;
         */
        value: string;
        case: "expression";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<LicenseChoice>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.LicenseChoice";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LicenseChoice;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LicenseChoice;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LicenseChoice;
    static equals(a: LicenseChoice | PlainMessage<LicenseChoice> | undefined, b: LicenseChoice | PlainMessage<LicenseChoice> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.License
 */
export declare class License extends Message<License> {
    /**
     * @generated from oneof cyclonedx.v1_5.License.license
     */
    license: {
        /**
         * A valid SPDX license ID
         *
         * @generated from field: string id = 1;
         */
        value: string;
        case: "id";
    } | {
        /**
         * If SPDX does not define the license used, this field may be used to provide the license name
         *
         * @generated from field: string name = 2;
         */
        value: string;
        case: "name";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * Specifies the optional full text of the attachment
     *
     * @generated from field: optional cyclonedx.v1_5.AttachedText text = 3;
     */
    text?: AttachedText;
    /**
     * The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
     *
     * @generated from field: optional string url = 4;
     */
    url?: string;
    /**
     * An optional identifier which can be used to reference the license elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     *
     * @generated from field: optional string bom_ref = 5;
     */
    bomRef?: string;
    /**
     * Licensing details describing the licensor/licensee, license type, renewal and expiration dates, and other important metadata
     *
     * @generated from field: optional cyclonedx.v1_5.Licensing licensing = 6;
     */
    licensing?: Licensing;
    /**
     * Specifies optional, custom, properties
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 7;
     */
    properties: Property[];
    constructor(data?: PartialMessage<License>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.License";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): License;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): License;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): License;
    static equals(a: License | PlainMessage<License> | undefined, b: License | PlainMessage<License> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Licensing
 */
export declare class Licensing extends Message<Licensing> {
    /**
     * License identifiers that may be used to manage licenses and their lifecycle
     *
     * @generated from field: repeated string altIds = 1;
     */
    altIds: string[];
    /**
     * The individual or organization that grants a license to another individual or organization
     *
     * @generated from field: optional cyclonedx.v1_5.OrganizationalEntityOrContact licensor = 2;
     */
    licensor?: OrganizationalEntityOrContact;
    /**
     * The individual or organization for which a license was granted to
     *
     * @generated from field: optional cyclonedx.v1_5.OrganizationalEntityOrContact licensee = 3;
     */
    licensee?: OrganizationalEntityOrContact;
    /**
     * The individual or organization that purchased the license
     *
     * @generated from field: optional cyclonedx.v1_5.OrganizationalEntityOrContact purchaser = 4;
     */
    purchaser?: OrganizationalEntityOrContact;
    /**
     * The purchase order identifier the purchaser sent to a supplier or vendor to authorize a purchase
     *
     * @generated from field: optional string purchaseOrder = 5;
     */
    purchaseOrder?: string;
    /**
     * The type of license(s) that was granted to the licensee
     *
     * @generated from field: repeated cyclonedx.v1_5.LicensingTypeEnum licenseTypes = 6;
     */
    licenseTypes: LicensingTypeEnum[];
    /**
     * The timestamp indicating when the license was last renewed. For new purchases, this is often the purchase or acquisition date. For non-perpetual licenses or subscriptions, this is the timestamp of when the license was last renewed.
     *
     * @generated from field: optional google.protobuf.Timestamp lastRenewal = 7;
     */
    lastRenewal?: Timestamp;
    /**
     * The timestamp indicating when the current license expires (if applicable).
     *
     * @generated from field: optional google.protobuf.Timestamp expiration = 8;
     */
    expiration?: Timestamp;
    constructor(data?: PartialMessage<Licensing>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Licensing";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Licensing;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Licensing;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Licensing;
    static equals(a: Licensing | PlainMessage<Licensing> | undefined, b: Licensing | PlainMessage<Licensing> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.OrganizationalEntityOrContact
 */
export declare class OrganizationalEntityOrContact extends Message<OrganizationalEntityOrContact> {
    /**
     * @generated from oneof cyclonedx.v1_5.OrganizationalEntityOrContact.choice
     */
    choice: {
        /**
         * @generated from field: cyclonedx.v1_5.OrganizationalEntity organization = 1;
         */
        value: OrganizationalEntity;
        case: "organization";
    } | {
        /**
         * @generated from field: cyclonedx.v1_5.OrganizationalContact individual = 2;
         */
        value: OrganizationalContact;
        case: "individual";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<OrganizationalEntityOrContact>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.OrganizationalEntityOrContact";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationalEntityOrContact;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationalEntityOrContact;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationalEntityOrContact;
    static equals(a: OrganizationalEntityOrContact | PlainMessage<OrganizationalEntityOrContact> | undefined, b: OrganizationalEntityOrContact | PlainMessage<OrganizationalEntityOrContact> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Metadata
 */
export declare class Metadata extends Message<Metadata> {
    /**
     * The date and time (timestamp) when the document was created.
     *
     * @generated from field: optional google.protobuf.Timestamp timestamp = 1;
     */
    timestamp?: Timestamp;
    /**
     * The tool(s) used in the creation of the BOM.
     *
     * @generated from field: optional cyclonedx.v1_5.Tool tools = 2;
     */
    tools?: Tool;
    /**
     * The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
     *
     * @generated from field: repeated cyclonedx.v1_5.OrganizationalContact authors = 3;
     */
    authors: OrganizationalContact[];
    /**
     * The component that the BOM describes.
     *
     * @generated from field: optional cyclonedx.v1_5.Component component = 4;
     */
    component?: Component;
    /**
     * The organization that manufactured the component that the BOM describes.
     *
     * @generated from field: optional cyclonedx.v1_5.OrganizationalEntity manufacture = 5;
     */
    manufacture?: OrganizationalEntity;
    /**
     * The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
     *
     * @generated from field: optional cyclonedx.v1_5.OrganizationalEntity supplier = 6;
     */
    supplier?: OrganizationalEntity;
    /**
     * The license information for the BOM document
     *
     * @generated from field: optional cyclonedx.v1_5.LicenseChoice licenses = 7;
     */
    licenses?: LicenseChoice;
    /**
     * Specifies optional, custom, properties
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 8;
     */
    properties: Property[];
    /**
     * The product lifecycle(s) that this BOM represents.
     *
     * @generated from field: repeated cyclonedx.v1_5.Lifecycles lifecycles = 9;
     */
    lifecycles: Lifecycles[];
    constructor(data?: PartialMessage<Metadata>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Metadata";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata;
    static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Lifecycles
 */
export declare class Lifecycles extends Message<Lifecycles> {
    /**
     * @generated from oneof cyclonedx.v1_5.Lifecycles.choice
     */
    choice: {
        /**
         * A pre-defined phase in the product lifecycle.
         *
         * @generated from field: cyclonedx.v1_5.LifecyclePhase phase = 1;
         */
        value: LifecyclePhase;
        case: "phase";
    } | {
        /**
         * The name of the lifecycle phase
         *
         * @generated from field: string name = 2;
         */
        value: string;
        case: "name";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * The description of the lifecycle phase
     *
     * @generated from field: optional string description = 3;
     */
    description?: string;
    constructor(data?: PartialMessage<Lifecycles>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Lifecycles";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Lifecycles;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Lifecycles;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Lifecycles;
    static equals(a: Lifecycles | PlainMessage<Lifecycles> | undefined, b: Lifecycles | PlainMessage<Lifecycles> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.OrganizationalContact
 */
export declare class OrganizationalContact extends Message<OrganizationalContact> {
    /**
     * The name of the contact
     *
     * @generated from field: optional string name = 1;
     */
    name?: string;
    /**
     * The email address of the contact.
     *
     * @generated from field: optional string email = 2;
     */
    email?: string;
    /**
     * The phone number of the contact.
     *
     * @generated from field: optional string phone = 3;
     */
    phone?: string;
    /**
     * An optional identifier which can be used to reference the object elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     *
     * @generated from field: optional string bom_ref = 4;
     */
    bomRef?: string;
    constructor(data?: PartialMessage<OrganizationalContact>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.OrganizationalContact";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationalContact;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationalContact;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationalContact;
    static equals(a: OrganizationalContact | PlainMessage<OrganizationalContact> | undefined, b: OrganizationalContact | PlainMessage<OrganizationalContact> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.OrganizationalEntity
 */
export declare class OrganizationalEntity extends Message<OrganizationalEntity> {
    /**
     * The name of the organization
     *
     * @generated from field: optional string name = 1;
     */
    name?: string;
    /**
     * The URL of the organization. Multiple URLs are allowed.
     *
     * @generated from field: repeated string url = 2;
     */
    url: string[];
    /**
     * A contact person at the organization. Multiple contacts are allowed.
     *
     * @generated from field: repeated cyclonedx.v1_5.OrganizationalContact contact = 3;
     */
    contact: OrganizationalContact[];
    /**
     * An optional identifier which can be used to reference the object elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     *
     * @generated from field: optional string bom_ref = 4;
     */
    bomRef?: string;
    constructor(data?: PartialMessage<OrganizationalEntity>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.OrganizationalEntity";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationalEntity;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationalEntity;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationalEntity;
    static equals(a: OrganizationalEntity | PlainMessage<OrganizationalEntity> | undefined, b: OrganizationalEntity | PlainMessage<OrganizationalEntity> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Patch
 */
export declare class Patch extends Message<Patch> {
    /**
     * Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality
     *
     * @generated from field: cyclonedx.v1_5.PatchClassification type = 1;
     */
    type: PatchClassification;
    /**
     * The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
     *
     * @generated from field: optional cyclonedx.v1_5.Diff diff = 2;
     */
    diff?: Diff;
    /**
     * @generated from field: repeated cyclonedx.v1_5.Issue resolves = 3;
     */
    resolves: Issue[];
    constructor(data?: PartialMessage<Patch>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Patch";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Patch;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Patch;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Patch;
    static equals(a: Patch | PlainMessage<Patch> | undefined, b: Patch | PlainMessage<Patch> | undefined): boolean;
}
/**
 * Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc. Pedigree supports viewing this complex chain from the beginning, the end, or anywhere in the middle. It also provides a way to document variants where the exact relation may not be known.
 *
 * @generated from message cyclonedx.v1_5.Pedigree
 */
export declare class Pedigree extends Message<Pedigree> {
    /**
     * Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
     *
     * @generated from field: repeated cyclonedx.v1_5.Component ancestors = 1;
     */
    ancestors: Component[];
    /**
     * Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
     *
     * @generated from field: repeated cyclonedx.v1_5.Component descendants = 2;
     */
    descendants: Component[];
    /**
     * Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
     *
     * @generated from field: repeated cyclonedx.v1_5.Component variants = 3;
     */
    variants: Component[];
    /**
     * A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
     *
     * @generated from field: repeated cyclonedx.v1_5.Commit commits = 4;
     */
    commits: Commit[];
    /**
     * A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
     *
     * @generated from field: repeated cyclonedx.v1_5.Patch patches = 5;
     */
    patches: Patch[];
    /**
     * Notes, observations, and other non-structured commentary describing the components pedigree.
     *
     * @generated from field: optional string notes = 6;
     */
    notes?: string;
    constructor(data?: PartialMessage<Pedigree>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Pedigree";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pedigree;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pedigree;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pedigree;
    static equals(a: Pedigree | PlainMessage<Pedigree> | undefined, b: Pedigree | PlainMessage<Pedigree> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Service
 */
export declare class Service extends Message<Service> {
    /**
     * An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     *
     * @generated from field: optional string bom_ref = 1;
     */
    bomRef?: string;
    /**
     * The organization that provides the service.
     *
     * @generated from field: optional cyclonedx.v1_5.OrganizationalEntity provider = 2;
     */
    provider?: OrganizationalEntity;
    /**
     * The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
     *
     * @generated from field: optional string group = 3;
     */
    group?: string;
    /**
     * The name of the service. This will often be a shortened, single name of the service.
     *
     * @generated from field: string name = 4;
     */
    name: string;
    /**
     * The service version.
     *
     * @generated from field: optional string version = 5;
     */
    version?: string;
    /**
     * Specifies a description for the service.
     *
     * @generated from field: optional string description = 6;
     */
    description?: string;
    /**
     * @generated from field: repeated string endpoints = 7;
     */
    endpoints: string[];
    /**
     * A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
     *
     * @generated from field: optional bool authenticated = 8;
     */
    authenticated?: boolean;
    /**
     * A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
     *
     * @generated from field: optional bool x_trust_boundary = 9;
     */
    xTrustBoundary?: boolean;
    /**
     * @generated from field: repeated cyclonedx.v1_5.DataFlow data = 10;
     */
    data: DataFlow[];
    /**
     * @generated from field: repeated cyclonedx.v1_5.LicenseChoice licenses = 11;
     */
    licenses: LicenseChoice[];
    /**
     * Provides the ability to document external references related to the service.
     *
     * @generated from field: repeated cyclonedx.v1_5.ExternalReference external_references = 12;
     */
    externalReferences: ExternalReference[];
    /**
     * Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -> subsystem -> parts assembly in physical supply chains.
     *
     * @generated from field: repeated cyclonedx.v1_5.Service services = 13;
     */
    services: Service[];
    /**
     * Specifies optional, custom, properties
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 14;
     */
    properties: Property[];
    /**
     * Specifies optional release notes.
     *
     * @generated from field: optional cyclonedx.v1_5.ReleaseNotes releaseNotes = 15;
     */
    releaseNotes?: ReleaseNotes;
    /**
     * The name of the trust zone the service resides in.
     *
     * @generated from field: optional string trustZone = 16;
     */
    trustZone?: string;
    constructor(data?: PartialMessage<Service>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Service";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Service;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Service;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Service;
    static equals(a: Service | PlainMessage<Service> | undefined, b: Service | PlainMessage<Service> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Swid
 */
export declare class Swid extends Message<Swid> {
    /**
     * Maps to the tagId of a SoftwareIdentity.
     *
     * @generated from field: string tag_id = 1;
     */
    tagId: string;
    /**
     * Maps to the name of a SoftwareIdentity.
     *
     * @generated from field: string name = 2;
     */
    name: string;
    /**
     * Maps to the version of a SoftwareIdentity. Defaults to '0.0' if not specified.
     *
     * @generated from field: optional string version = 3;
     */
    version?: string;
    /**
     * Maps to the tagVersion of a SoftwareIdentity. Defaults to '0' if not specified.
     *
     * @generated from field: optional int32 tag_version = 4;
     */
    tagVersion?: number;
    /**
     * Maps to the patch of a SoftwareIdentity. Defaults to 'false' if not specified.
     *
     * @generated from field: optional bool patch = 5;
     */
    patch?: boolean;
    /**
     * Specifies the full content of the SWID tag.
     *
     * @generated from field: optional cyclonedx.v1_5.AttachedText text = 6;
     */
    text?: AttachedText;
    /**
     * The URL to the SWID file.
     *
     * @generated from field: optional string url = 7;
     */
    url?: string;
    constructor(data?: PartialMessage<Swid>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Swid";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Swid;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Swid;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Swid;
    static equals(a: Swid | PlainMessage<Swid> | undefined, b: Swid | PlainMessage<Swid> | undefined): boolean;
}
/**
 * Specifies a tool (manual or automated).
 *
 * @generated from message cyclonedx.v1_5.Tool
 */
export declare class Tool extends Message<Tool> {
    /**
     * DEPRECATED - DO NOT USE - The vendor of the tool used to create the BOM.
     *
     * @generated from field: optional string vendor = 1 [deprecated = true];
     * @deprecated
     */
    vendor?: string;
    /**
     * DEPRECATED - DO NOT USE - The name of the tool used to create the BOM.
     *
     * @generated from field: optional string name = 2 [deprecated = true];
     * @deprecated
     */
    name?: string;
    /**
     * DEPRECATED - DO NOT USE - The version of the tool used to create the BOM.
     *
     * @generated from field: optional string version = 3 [deprecated = true];
     * @deprecated
     */
    version?: string;
    /**
     * DEPRECATED - DO NOT USE
     *
     * @generated from field: repeated cyclonedx.v1_5.Hash hashes = 4 [deprecated = true];
     * @deprecated
     */
    hashes: Hash[];
    /**
     * DEPRECATED - DO NOT USE - Provides the ability to document external references related to the tool.
     *
     * @generated from field: repeated cyclonedx.v1_5.ExternalReference external_references = 5 [deprecated = true];
     * @deprecated
     */
    externalReferences: ExternalReference[];
    /**
     * A list of software and hardware components used as tools
     *
     * @generated from field: repeated cyclonedx.v1_5.Component components = 6;
     */
    components: Component[];
    /**
     * A list of services used as tools. This may include microservices, function-as-a-service, and other types of network or intra-process services.
     *
     * @generated from field: repeated cyclonedx.v1_5.Service services = 7;
     */
    services: Service[];
    constructor(data?: PartialMessage<Tool>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Tool";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tool;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tool;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tool;
    static equals(a: Tool | PlainMessage<Tool> | undefined, b: Tool | PlainMessage<Tool> | undefined): boolean;
}
/**
 * Specifies a property
 *
 * @generated from message cyclonedx.v1_5.Property
 */
export declare class Property extends Message<Property> {
    /**
     * @generated from field: string name = 1;
     */
    name: string;
    /**
     * @generated from field: optional string value = 2;
     */
    value?: string;
    constructor(data?: PartialMessage<Property>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Property";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Property;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Property;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Property;
    static equals(a: Property | PlainMessage<Property> | undefined, b: Property | PlainMessage<Property> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Composition
 */
export declare class Composition extends Message<Composition> {
    /**
     * Indicates the aggregate completeness
     *
     * @generated from field: cyclonedx.v1_5.Aggregate aggregate = 1;
     */
    aggregate: Aggregate;
    /**
     * The assemblies the aggregate completeness applies to
     *
     * @generated from field: repeated string assemblies = 2;
     */
    assemblies: string[];
    /**
     * The dependencies the aggregate completeness applies to
     *
     * @generated from field: repeated string dependencies = 3;
     */
    dependencies: string[];
    /**
     * The bom-ref identifiers of the vulnerabilities being described.
     *
     * @generated from field: repeated string vulnerabilities = 4;
     */
    vulnerabilities: string[];
    /**
     * An optional identifier which can be used to reference the composition elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
     *
     * @generated from field: optional string bom_ref = 5;
     */
    bomRef?: string;
    constructor(data?: PartialMessage<Composition>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Composition";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Composition;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Composition;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Composition;
    static equals(a: Composition | PlainMessage<Composition> | undefined, b: Composition | PlainMessage<Composition> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.EvidenceCopyright
 */
export declare class EvidenceCopyright extends Message<EvidenceCopyright> {
    /**
     * Copyright text
     *
     * @generated from field: string text = 1;
     */
    text: string;
    constructor(data?: PartialMessage<EvidenceCopyright>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.EvidenceCopyright";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvidenceCopyright;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvidenceCopyright;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvidenceCopyright;
    static equals(a: EvidenceCopyright | PlainMessage<EvidenceCopyright> | undefined, b: EvidenceCopyright | PlainMessage<EvidenceCopyright> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Evidence
 */
export declare class Evidence extends Message<Evidence> {
    /**
     * @generated from field: repeated cyclonedx.v1_5.LicenseChoice licenses = 1;
     */
    licenses: LicenseChoice[];
    /**
     * @generated from field: repeated cyclonedx.v1_5.EvidenceCopyright copyright = 2;
     */
    copyright: EvidenceCopyright[];
    /**
     * @generated from field: optional cyclonedx.v1_5.EvidenceIdentity identity = 3;
     */
    identity?: EvidenceIdentity;
    /**
     * @generated from field: repeated cyclonedx.v1_5.EvidenceOccurrences occurrences = 4;
     */
    occurrences: EvidenceOccurrences[];
    /**
     * @generated from field: optional cyclonedx.v1_5.Callstack callstack = 5;
     */
    callstack?: Callstack;
    constructor(data?: PartialMessage<Evidence>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Evidence";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Evidence;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Evidence;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Evidence;
    static equals(a: Evidence | PlainMessage<Evidence> | undefined, b: Evidence | PlainMessage<Evidence> | undefined): boolean;
}
/**
 * Evidence of the components use through the callstack.
 *
 * @generated from message cyclonedx.v1_5.Callstack
 */
export declare class Callstack extends Message<Callstack> {
    /**
     * @generated from field: repeated cyclonedx.v1_5.Callstack.Frames frames = 1;
     */
    frames: Callstack_Frames[];
    constructor(data?: PartialMessage<Callstack>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Callstack";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Callstack;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Callstack;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Callstack;
    static equals(a: Callstack | PlainMessage<Callstack> | undefined, b: Callstack | PlainMessage<Callstack> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Callstack.Frames
 */
export declare class Callstack_Frames extends Message<Callstack_Frames> {
    /**
     * A package organizes modules into namespaces, providing a unique namespace for each type it contains.
     *
     * @generated from field: optional string package = 1;
     */
    package?: string;
    /**
     * A module or class that encloses functions/methods and other code.
     *
     * @generated from field: string module = 2;
     */
    module: string;
    /**
     * A block of code designed to perform a particular task.
     *
     * @generated from field: optional string function = 3;
     */
    function?: string;
    /**
     * Optional arguments that are passed to the module or function.
     *
     * @generated from field: repeated string parameters = 4;
     */
    parameters: string[];
    /**
     * The line number the code that is called resides on.
     *
     * @generated from field: optional int32 line = 5;
     */
    line?: number;
    /**
     * The column the code that is called resides.
     *
     * @generated from field: optional int32 column = 6;
     */
    column?: number;
    /**
     * The full path and filename of the module.
     *
     * @generated from field: optional string fullFilename = 7;
     */
    fullFilename?: string;
    constructor(data?: PartialMessage<Callstack_Frames>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Callstack.Frames";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Callstack_Frames;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Callstack_Frames;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Callstack_Frames;
    static equals(a: Callstack_Frames | PlainMessage<Callstack_Frames> | undefined, b: Callstack_Frames | PlainMessage<Callstack_Frames> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.EvidenceIdentity
 */
export declare class EvidenceIdentity extends Message<EvidenceIdentity> {
    /**
     * The identity field of the component which the evidence describes.
     *
     * @generated from field: cyclonedx.v1_5.EvidenceFieldType field = 1;
     */
    field: EvidenceFieldType;
    /**
     * The overall confidence of the evidence from 0 - 1, where 1 is 100% confidence.
     *
     * @generated from field: optional float confidence = 2;
     */
    confidence?: number;
    /**
     * The methods used to extract and/or analyze the evidence.
     *
     * @generated from field: repeated cyclonedx.v1_5.EvidenceMethods methods = 3;
     */
    methods: EvidenceMethods[];
    /**
     * The object in the BOM identified by its bom-ref. This is often a component or service, but may be any object type supporting bom-refs. Tools used for analysis should already be defined in the BOM, either in the metadata/tools, components, or formulation.
     *
     * @generated from field: repeated string tools = 4;
     */
    tools: string[];
    constructor(data?: PartialMessage<EvidenceIdentity>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.EvidenceIdentity";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvidenceIdentity;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvidenceIdentity;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvidenceIdentity;
    static equals(a: EvidenceIdentity | PlainMessage<EvidenceIdentity> | undefined, b: EvidenceIdentity | PlainMessage<EvidenceIdentity> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.EvidenceMethods
 */
export declare class EvidenceMethods extends Message<EvidenceMethods> {
    /**
     * The technique used in this method of analysis.
     *
     * @generated from field: cyclonedx.v1_5.EvidenceTechnique technique = 1;
     */
    technique: EvidenceTechnique;
    /**
     * The confidence of the evidence from 0 - 1, where 1 is 100% confidence. Confidence is specific to the technique used. Each technique of analysis can have independent confidence.
     *
     * @generated from field: float confidence = 2;
     */
    confidence: number;
    /**
     * The value or contents of the evidence.
     *
     * @generated from field: optional string value = 3;
     */
    value?: string;
    constructor(data?: PartialMessage<EvidenceMethods>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.EvidenceMethods";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvidenceMethods;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvidenceMethods;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvidenceMethods;
    static equals(a: EvidenceMethods | PlainMessage<EvidenceMethods> | undefined, b: EvidenceMethods | PlainMessage<EvidenceMethods> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.EvidenceOccurrences
 */
export declare class EvidenceOccurrences extends Message<EvidenceOccurrences> {
    /**
     * An optional identifier which can be used to reference the occurrence elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
     *
     * @generated from field: optional string bom_ref = 1;
     */
    bomRef?: string;
    /**
     * The location or path to where the component was found.
     *
     * @generated from field: string location = 2;
     */
    location: string;
    constructor(data?: PartialMessage<EvidenceOccurrences>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.EvidenceOccurrences";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvidenceOccurrences;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvidenceOccurrences;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvidenceOccurrences;
    static equals(a: EvidenceOccurrences | PlainMessage<EvidenceOccurrences> | undefined, b: EvidenceOccurrences | PlainMessage<EvidenceOccurrences> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Note
 */
export declare class Note extends Message<Note> {
    /**
     * The ISO-639 (or higher) language code and optional ISO-3166 (or higher) country code. Examples include: "en", "en-US", "fr" and "fr-CA".
     *
     * @generated from field: optional string locale = 1;
     */
    locale?: string;
    /**
     * Specifies the full content of the release note.
     *
     * @generated from field: optional cyclonedx.v1_5.AttachedText text = 2;
     */
    text?: AttachedText;
    constructor(data?: PartialMessage<Note>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Note";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Note;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Note;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Note;
    static equals(a: Note | PlainMessage<Note> | undefined, b: Note | PlainMessage<Note> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ReleaseNotes
 */
export declare class ReleaseNotes extends Message<ReleaseNotes> {
    /**
     * The software versioning type. It is RECOMMENDED that the release type use one of 'major', 'minor', 'patch', 'pre-release', or 'internal'. Representing all possible software release types is not practical, so standardizing on the recommended values, whenever possible, is strongly encouraged.
     *
     * @generated from field: string type = 1;
     */
    type: string;
    /**
     * The title of the release.
     *
     * @generated from field: optional string title = 2;
     */
    title?: string;
    /**
     * The URL to an image that may be prominently displayed with the release note.
     *
     * @generated from field: optional string featuredImage = 3;
     */
    featuredImage?: string;
    /**
     * The URL to an image that may be used in messaging on social media platforms.
     *
     * @generated from field: optional string socialImage = 4;
     */
    socialImage?: string;
    /**
     * A short description of the release.
     *
     * @generated from field: optional string description = 5;
     */
    description?: string;
    /**
     * The date and time (timestamp) when the release note was created.
     *
     * @generated from field: optional google.protobuf.Timestamp timestamp = 6;
     */
    timestamp?: Timestamp;
    /**
     * Optional alternate names the release may be referred to. This may include unofficial terms used by development and marketing teams (e.g. code names).
     *
     * @generated from field: repeated string aliases = 7;
     */
    aliases: string[];
    /**
     * Optional tags that may aid in search or retrieval of the release note.
     *
     * @generated from field: repeated string tags = 8;
     */
    tags: string[];
    /**
     * A collection of issues that have been resolved.
     *
     * @generated from field: repeated cyclonedx.v1_5.Issue resolves = 9;
     */
    resolves: Issue[];
    /**
     * Zero or more release notes containing the locale and content. Multiple note messages may be specified to support release notes in a wide variety of languages.
     *
     * @generated from field: repeated cyclonedx.v1_5.Note notes = 10;
     */
    notes: Note[];
    /**
     * Specifies optional, custom, properties
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 11;
     */
    properties: Property[];
    constructor(data?: PartialMessage<ReleaseNotes>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ReleaseNotes";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReleaseNotes;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReleaseNotes;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReleaseNotes;
    static equals(a: ReleaseNotes | PlainMessage<ReleaseNotes> | undefined, b: ReleaseNotes | PlainMessage<ReleaseNotes> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Vulnerability
 */
export declare class Vulnerability extends Message<Vulnerability> {
    /**
     * An optional identifier which can be used to reference the vulnerability elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
     *
     * @generated from field: optional string bom_ref = 1;
     */
    bomRef?: string;
    /**
     * The identifier that uniquely identifies the vulnerability.
     *
     * @generated from field: optional string id = 2;
     */
    id?: string;
    /**
     * The source that published the vulnerability.
     *
     * @generated from field: optional cyclonedx.v1_5.Source source = 3;
     */
    source?: Source;
    /**
     * Zero or more pointers to vulnerabilities that are the equivalent of the vulnerability specified. Often times, the same vulnerability may exist in multiple sources of vulnerability intelligence, but have different identifiers. References provide a way to correlate vulnerabilities across multiple sources of vulnerability intelligence.
     *
     * @generated from field: repeated cyclonedx.v1_5.VulnerabilityReference references = 4;
     */
    references: VulnerabilityReference[];
    /**
     * List of vulnerability ratings
     *
     * @generated from field: repeated cyclonedx.v1_5.VulnerabilityRating ratings = 5;
     */
    ratings: VulnerabilityRating[];
    /**
     * List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability. For example 399 (of https://cwe.mitre.org/data/definitions/399.html)
     *
     * @generated from field: repeated int32 cwes = 6;
     */
    cwes: number[];
    /**
     * A description of the vulnerability as provided by the source.
     *
     * @generated from field: optional string description = 7;
     */
    description?: string;
    /**
     * If available, an in-depth description of the vulnerability as provided by the source organization. Details often include information useful in understanding root cause.
     *
     * @generated from field: optional string detail = 8;
     */
    detail?: string;
    /**
     * Recommendations of how the vulnerability can be remediated or mitigated.
     *
     * @generated from field: optional string recommendation = 9;
     */
    recommendation?: string;
    /**
     * Published advisories of the vulnerability if provided.
     *
     * @generated from field: repeated cyclonedx.v1_5.Advisory advisories = 10;
     */
    advisories: Advisory[];
    /**
     * The date and time (timestamp) when the vulnerability record was created in the vulnerability database.
     *
     * @generated from field: optional google.protobuf.Timestamp created = 11;
     */
    created?: Timestamp;
    /**
     * The date and time (timestamp) when the vulnerability record was first published.
     *
     * @generated from field: optional google.protobuf.Timestamp published = 12;
     */
    published?: Timestamp;
    /**
     * The date and time (timestamp) when the vulnerability record was last updated.
     *
     * @generated from field: optional google.protobuf.Timestamp updated = 13;
     */
    updated?: Timestamp;
    /**
     * Individuals or organizations credited with the discovery of the vulnerability.
     *
     * @generated from field: optional cyclonedx.v1_5.VulnerabilityCredits credits = 14;
     */
    credits?: VulnerabilityCredits;
    /**
     * The tool(s) used to identify, confirm, or score the vulnerability.
     *
     * @generated from field: optional cyclonedx.v1_5.Tool tools = 15;
     */
    tools?: Tool;
    /**
     * An assessment of the impact and exploitability of the vulnerability.
     *
     * @generated from field: optional cyclonedx.v1_5.VulnerabilityAnalysis analysis = 16;
     */
    analysis?: VulnerabilityAnalysis;
    /**
     * affects
     *
     * @generated from field: repeated cyclonedx.v1_5.VulnerabilityAffects affects = 17;
     */
    affects: VulnerabilityAffects[];
    /**
     * Specifies optional, custom, properties
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 18;
     */
    properties: Property[];
    /**
     * The date and time (timestamp) when the vulnerability record was rejected (if applicable).
     *
     * @generated from field: optional google.protobuf.Timestamp rejected = 19;
     */
    rejected?: Timestamp;
    /**
     * Evidence used to reproduce the vulnerability.
     *
     * @generated from field: optional cyclonedx.v1_5.ProofOfConcept proofOfConcept = 20;
     */
    proofOfConcept?: ProofOfConcept;
    /**
     * A bypass, usually temporary, of the vulnerability that reduces its likelihood and/or impact. Workarounds often involve changes to configuration or deployments.
     *
     * @generated from field: optional string workaround = 21;
     */
    workaround?: string;
    constructor(data?: PartialMessage<Vulnerability>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Vulnerability";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Vulnerability;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Vulnerability;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Vulnerability;
    static equals(a: Vulnerability | PlainMessage<Vulnerability> | undefined, b: Vulnerability | PlainMessage<Vulnerability> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ProofOfConcept
 */
export declare class ProofOfConcept extends Message<ProofOfConcept> {
    /**
     * Precise steps to reproduce the vulnerability.
     *
     * @generated from field: optional string reproductionSteps = 1;
     */
    reproductionSteps?: string;
    /**
     * A description of the environment in which reproduction was possible.
     *
     * @generated from field: optional string environment = 2;
     */
    environment?: string;
    /**
     * Supporting material that helps in reproducing or understanding how reproduction is possible. This may include screenshots, payloads, and PoC exploit code.
     *
     * @generated from field: repeated cyclonedx.v1_5.AttachedText supportingMaterial = 3;
     */
    supportingMaterial: AttachedText[];
    constructor(data?: PartialMessage<ProofOfConcept>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ProofOfConcept";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProofOfConcept;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProofOfConcept;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProofOfConcept;
    static equals(a: ProofOfConcept | PlainMessage<ProofOfConcept> | undefined, b: ProofOfConcept | PlainMessage<ProofOfConcept> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.VulnerabilityReference
 */
export declare class VulnerabilityReference extends Message<VulnerabilityReference> {
    /**
     * An identifier that uniquely identifies the vulnerability.
     *
     * @generated from field: string id = 1;
     */
    id: string;
    /**
     * The source that published the vulnerability.
     *
     * @generated from field: cyclonedx.v1_5.Source source = 2;
     */
    source?: Source;
    constructor(data?: PartialMessage<VulnerabilityReference>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.VulnerabilityReference";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VulnerabilityReference;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VulnerabilityReference;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VulnerabilityReference;
    static equals(a: VulnerabilityReference | PlainMessage<VulnerabilityReference> | undefined, b: VulnerabilityReference | PlainMessage<VulnerabilityReference> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.VulnerabilityRating
 */
export declare class VulnerabilityRating extends Message<VulnerabilityRating> {
    /**
     * The source that calculated the severity or risk rating of the vulnerability.
     *
     * @generated from field: optional cyclonedx.v1_5.Source source = 1;
     */
    source?: Source;
    /**
     * The numerical score of the rating.
     *
     * @generated from field: optional double score = 2;
     */
    score?: number;
    /**
     * Textual representation of the severity that corresponds to the numerical score of the rating.
     *
     * @generated from field: optional cyclonedx.v1_5.Severity severity = 3;
     */
    severity?: Severity;
    /**
     * Specifies the severity or risk scoring methodology or standard used.
     *
     * @generated from field: optional cyclonedx.v1_5.ScoreMethod method = 4;
     */
    method?: ScoreMethod;
    /**
     * Textual representation of the metric values used to score the vulnerability.
     *
     * @generated from field: optional string vector = 5;
     */
    vector?: string;
    /**
     * An optional reason for rating the vulnerability as it was.
     *
     * @generated from field: optional string justification = 6;
     */
    justification?: string;
    constructor(data?: PartialMessage<VulnerabilityRating>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.VulnerabilityRating";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VulnerabilityRating;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VulnerabilityRating;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VulnerabilityRating;
    static equals(a: VulnerabilityRating | PlainMessage<VulnerabilityRating> | undefined, b: VulnerabilityRating | PlainMessage<VulnerabilityRating> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Advisory
 */
export declare class Advisory extends Message<Advisory> {
    /**
     * An optional name of the advisory.
     *
     * @generated from field: optional string title = 1;
     */
    title?: string;
    /**
     * Location where the advisory can be obtained.
     *
     * @generated from field: string url = 2;
     */
    url: string;
    constructor(data?: PartialMessage<Advisory>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Advisory";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Advisory;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Advisory;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Advisory;
    static equals(a: Advisory | PlainMessage<Advisory> | undefined, b: Advisory | PlainMessage<Advisory> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.VulnerabilityCredits
 */
export declare class VulnerabilityCredits extends Message<VulnerabilityCredits> {
    /**
     * The organizations credited with vulnerability discovery.
     *
     * @generated from field: repeated cyclonedx.v1_5.OrganizationalEntity organizations = 1;
     */
    organizations: OrganizationalEntity[];
    /**
     * The individuals, not associated with organizations, that are credited with vulnerability discovery.
     *
     * @generated from field: repeated cyclonedx.v1_5.OrganizationalContact individuals = 2;
     */
    individuals: OrganizationalContact[];
    constructor(data?: PartialMessage<VulnerabilityCredits>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.VulnerabilityCredits";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VulnerabilityCredits;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VulnerabilityCredits;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VulnerabilityCredits;
    static equals(a: VulnerabilityCredits | PlainMessage<VulnerabilityCredits> | undefined, b: VulnerabilityCredits | PlainMessage<VulnerabilityCredits> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.VulnerabilityAnalysis
 */
export declare class VulnerabilityAnalysis extends Message<VulnerabilityAnalysis> {
    /**
     * Declares the current state of an occurrence of a vulnerability, after automated or manual analysis.
     *
     * @generated from field: optional cyclonedx.v1_5.ImpactAnalysisState state = 1;
     */
    state?: ImpactAnalysisState;
    /**
     * The rationale of why the impact analysis state was asserted.
     *
     * @generated from field: optional cyclonedx.v1_5.ImpactAnalysisJustification justification = 2;
     */
    justification?: ImpactAnalysisJustification;
    /**
     * A response to the vulnerability by the manufacturer, supplier, or project responsible for the affected component or service. More than one response is allowed. Responses are strongly encouraged for vulnerabilities where the analysis state is exploitable.
     *
     * @generated from field: repeated cyclonedx.v1_5.VulnerabilityResponse response = 3;
     */
    response: VulnerabilityResponse[];
    /**
     * Detailed description of the impact including methods used during assessment. If a vulnerability is not exploitable, this field should include specific details on why the component or service is not impacted by this vulnerability.
     *
     * @generated from field: optional string detail = 4;
     */
    detail?: string;
    /**
     * The date and time (timestamp) when the analysis was first issued.
     *
     * @generated from field: optional google.protobuf.Timestamp firstIssued = 5;
     */
    firstIssued?: Timestamp;
    /**
     * The date and time (timestamp) when the analysis was last updated.
     *
     * @generated from field: optional google.protobuf.Timestamp lastUpdated = 6;
     */
    lastUpdated?: Timestamp;
    constructor(data?: PartialMessage<VulnerabilityAnalysis>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.VulnerabilityAnalysis";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VulnerabilityAnalysis;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VulnerabilityAnalysis;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VulnerabilityAnalysis;
    static equals(a: VulnerabilityAnalysis | PlainMessage<VulnerabilityAnalysis> | undefined, b: VulnerabilityAnalysis | PlainMessage<VulnerabilityAnalysis> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.VulnerabilityAffects
 */
export declare class VulnerabilityAffects extends Message<VulnerabilityAffects> {
    /**
     * References a component or service by the objects bom-ref
     *
     * @generated from field: string ref = 1;
     */
    ref: string;
    /**
     * Zero or more individual versions or range of versions.
     *
     * @generated from field: repeated cyclonedx.v1_5.VulnerabilityAffectedVersions versions = 2;
     */
    versions: VulnerabilityAffectedVersions[];
    constructor(data?: PartialMessage<VulnerabilityAffects>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.VulnerabilityAffects";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VulnerabilityAffects;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VulnerabilityAffects;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VulnerabilityAffects;
    static equals(a: VulnerabilityAffects | PlainMessage<VulnerabilityAffects> | undefined, b: VulnerabilityAffects | PlainMessage<VulnerabilityAffects> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.VulnerabilityAffectedVersions
 */
export declare class VulnerabilityAffectedVersions extends Message<VulnerabilityAffectedVersions> {
    /**
     * @generated from oneof cyclonedx.v1_5.VulnerabilityAffectedVersions.choice
     */
    choice: {
        /**
         * A single version of a component or service.
         *
         * @generated from field: string version = 1;
         */
        value: string;
        case: "version";
    } | {
        /**
         * A version range specified in Package URL Version Range syntax (vers) which is defined at https://github.com/package-url/purl-spec/VERSION-RANGE-SPEC.rst
         *
         * @generated from field: string range = 2;
         */
        value: string;
        case: "range";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * The vulnerability status for the version or range of versions. Defaults to VULNERABILITY_AFFECTED_STATUS_AFFECTED if not specified.
     *
     * @generated from field: optional cyclonedx.v1_5.VulnerabilityAffectedStatus status = 3;
     */
    status?: VulnerabilityAffectedStatus;
    constructor(data?: PartialMessage<VulnerabilityAffectedVersions>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.VulnerabilityAffectedVersions";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VulnerabilityAffectedVersions;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VulnerabilityAffectedVersions;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VulnerabilityAffectedVersions;
    static equals(a: VulnerabilityAffectedVersions | PlainMessage<VulnerabilityAffectedVersions> | undefined, b: VulnerabilityAffectedVersions | PlainMessage<VulnerabilityAffectedVersions> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.AnnotatorChoice
 */
export declare class AnnotatorChoice extends Message<AnnotatorChoice> {
    /**
     * @generated from oneof cyclonedx.v1_5.AnnotatorChoice.choice
     */
    choice: {
        /**
         * The organization that created the annotation
         *
         * @generated from field: cyclonedx.v1_5.OrganizationalEntity organization = 1;
         */
        value: OrganizationalEntity;
        case: "organization";
    } | {
        /**
         * The person that created the annotation
         *
         * @generated from field: cyclonedx.v1_5.OrganizationalContact individual = 2;
         */
        value: OrganizationalContact;
        case: "individual";
    } | {
        /**
         * The tool or component that created the annotation
         *
         * @generated from field: cyclonedx.v1_5.Component component = 3;
         */
        value: Component;
        case: "component";
    } | {
        /**
         * The service that created the annotation
         *
         * @generated from field: cyclonedx.v1_5.Service service = 4;
         */
        value: Service;
        case: "service";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<AnnotatorChoice>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.AnnotatorChoice";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnnotatorChoice;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnnotatorChoice;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnnotatorChoice;
    static equals(a: AnnotatorChoice | PlainMessage<AnnotatorChoice> | undefined, b: AnnotatorChoice | PlainMessage<AnnotatorChoice> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Annotation
 */
export declare class Annotation extends Message<Annotation> {
    /**
     * An optional identifier which can be used to reference the annotation elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
     *
     * @generated from field: optional string bom_ref = 1;
     */
    bomRef?: string;
    /**
     * The object in the BOM identified by its bom-ref. This is often a component or service, but may be any object type supporting bom-refs.
     *
     * @generated from field: repeated string subjects = 2;
     */
    subjects: string[];
    /**
     * The organization, person, component, or service which created the textual content of the annotation.
     *
     * @generated from field: cyclonedx.v1_5.AnnotatorChoice annotator = 3;
     */
    annotator?: AnnotatorChoice;
    /**
     * The date and time (timestamp) when the annotation was created.
     *
     * @generated from field: google.protobuf.Timestamp timestamp = 4;
     */
    timestamp?: Timestamp;
    /**
     * The textual content of the annotation.
     *
     * @generated from field: string text = 5;
     */
    text: string;
    constructor(data?: PartialMessage<Annotation>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Annotation";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Annotation;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Annotation;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Annotation;
    static equals(a: Annotation | PlainMessage<Annotation> | undefined, b: Annotation | PlainMessage<Annotation> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ModelCard
 */
export declare class ModelCard extends Message<ModelCard> {
    /**
     * An optional identifier which can be used to reference the model card elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
     *
     * @generated from field: optional string bom_ref = 1;
     */
    bomRef?: string;
    /**
     * Hyper-parameters for construction of the model.
     *
     * @generated from field: optional cyclonedx.v1_5.ModelCard.ModelParameters modelParameters = 2;
     */
    modelParameters?: ModelCard_ModelParameters;
    /**
     * A quantitative analysis of the model
     *
     * @generated from field: optional cyclonedx.v1_5.ModelCard.QuantitativeAnalysis quantitativeAnalysis = 3;
     */
    quantitativeAnalysis?: ModelCard_QuantitativeAnalysis;
    /**
     * What considerations should be taken into account regarding the model's construction, training, and application?
     *
     * @generated from field: optional cyclonedx.v1_5.ModelCard.ModelCardConsiderations considerations = 4;
     */
    considerations?: ModelCard_ModelCardConsiderations;
    constructor(data?: PartialMessage<ModelCard>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ModelCard";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelCard;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelCard;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelCard;
    static equals(a: ModelCard | PlainMessage<ModelCard> | undefined, b: ModelCard | PlainMessage<ModelCard> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ModelCard.ModelParameters
 */
export declare class ModelCard_ModelParameters extends Message<ModelCard_ModelParameters> {
    /**
     * The overall approach to learning used by the model for problem solving.
     *
     * @generated from field: optional cyclonedx.v1_5.ModelCard.ModelParameters.Approach approach = 1;
     */
    approach?: ModelCard_ModelParameters_Approach;
    /**
     * Directly influences the input and/or output. Examples include classification, regression, clustering, etc.
     *
     * @generated from field: optional string task = 2;
     */
    task?: string;
    /**
     * The model architecture family such as transformer network, convolutional neural network, residual neural network, LSTM neural network, etc.
     *
     * @generated from field: optional string architectureFamily = 3;
     */
    architectureFamily?: string;
    /**
     * The specific architecture of the model such as GPT-1, ResNet-50, YOLOv3, etc.
     *
     * @generated from field: optional string modelArchitecture = 4;
     */
    modelArchitecture?: string;
    /**
     * The datasets used to train and evaluate the model.
     *
     * @generated from field: repeated cyclonedx.v1_5.ModelCard.ModelParameters.Datasets datasets = 5;
     */
    datasets: ModelCard_ModelParameters_Datasets[];
    /**
     * The input format(s) of the model
     *
     * @generated from field: repeated cyclonedx.v1_5.ModelCard.ModelParameters.MachineLearningInputOutputParameters inputs = 6;
     */
    inputs: ModelCard_ModelParameters_MachineLearningInputOutputParameters[];
    /**
     * The output format(s) from the model
     *
     * @generated from field: repeated cyclonedx.v1_5.ModelCard.ModelParameters.MachineLearningInputOutputParameters outputs = 7;
     */
    outputs: ModelCard_ModelParameters_MachineLearningInputOutputParameters[];
    constructor(data?: PartialMessage<ModelCard_ModelParameters>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ModelCard.ModelParameters";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelCard_ModelParameters;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelCard_ModelParameters;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelCard_ModelParameters;
    static equals(a: ModelCard_ModelParameters | PlainMessage<ModelCard_ModelParameters> | undefined, b: ModelCard_ModelParameters | PlainMessage<ModelCard_ModelParameters> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ModelCard.ModelParameters.Approach
 */
export declare class ModelCard_ModelParameters_Approach extends Message<ModelCard_ModelParameters_Approach> {
    /**
     * @generated from field: optional cyclonedx.v1_5.ModelParameterApproachType type = 1;
     */
    type?: ModelParameterApproachType;
    constructor(data?: PartialMessage<ModelCard_ModelParameters_Approach>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ModelCard.ModelParameters.Approach";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelCard_ModelParameters_Approach;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelCard_ModelParameters_Approach;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelCard_ModelParameters_Approach;
    static equals(a: ModelCard_ModelParameters_Approach | PlainMessage<ModelCard_ModelParameters_Approach> | undefined, b: ModelCard_ModelParameters_Approach | PlainMessage<ModelCard_ModelParameters_Approach> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ModelCard.ModelParameters.Datasets
 */
export declare class ModelCard_ModelParameters_Datasets extends Message<ModelCard_ModelParameters_Datasets> {
    /**
     * @generated from oneof cyclonedx.v1_5.ModelCard.ModelParameters.Datasets.choice
     */
    choice: {
        /**
         * @generated from field: cyclonedx.v1_5.ComponentData dataset = 1;
         */
        value: ComponentData;
        case: "dataset";
    } | {
        /**
         * References a data component by the components bom-ref attribute
         *
         * @generated from field: string ref = 2;
         */
        value: string;
        case: "ref";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<ModelCard_ModelParameters_Datasets>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ModelCard.ModelParameters.Datasets";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelCard_ModelParameters_Datasets;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelCard_ModelParameters_Datasets;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelCard_ModelParameters_Datasets;
    static equals(a: ModelCard_ModelParameters_Datasets | PlainMessage<ModelCard_ModelParameters_Datasets> | undefined, b: ModelCard_ModelParameters_Datasets | PlainMessage<ModelCard_ModelParameters_Datasets> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ModelCard.ModelParameters.MachineLearningInputOutputParameters
 */
export declare class ModelCard_ModelParameters_MachineLearningInputOutputParameters extends Message<ModelCard_ModelParameters_MachineLearningInputOutputParameters> {
    /**
     * The data format for input/output to the model. Example formats include string, image, time-series
     *
     * @generated from field: optional string format = 1;
     */
    format?: string;
    constructor(data?: PartialMessage<ModelCard_ModelParameters_MachineLearningInputOutputParameters>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ModelCard.ModelParameters.MachineLearningInputOutputParameters";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelCard_ModelParameters_MachineLearningInputOutputParameters;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelCard_ModelParameters_MachineLearningInputOutputParameters;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelCard_ModelParameters_MachineLearningInputOutputParameters;
    static equals(a: ModelCard_ModelParameters_MachineLearningInputOutputParameters | PlainMessage<ModelCard_ModelParameters_MachineLearningInputOutputParameters> | undefined, b: ModelCard_ModelParameters_MachineLearningInputOutputParameters | PlainMessage<ModelCard_ModelParameters_MachineLearningInputOutputParameters> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ModelCard.QuantitativeAnalysis
 */
export declare class ModelCard_QuantitativeAnalysis extends Message<ModelCard_QuantitativeAnalysis> {
    /**
     * The model performance metrics being reported. Examples may include accuracy, F1 score, precision, top-3 error rates, MSC, etc.
     *
     * @generated from field: repeated cyclonedx.v1_5.ModelCard.QuantitativeAnalysis.PerformanceMetrics performanceMetrics = 1;
     */
    performanceMetrics: ModelCard_QuantitativeAnalysis_PerformanceMetrics[];
    /**
     * @generated from field: optional cyclonedx.v1_5.GraphicsCollection graphics = 2;
     */
    graphics?: GraphicsCollection;
    constructor(data?: PartialMessage<ModelCard_QuantitativeAnalysis>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ModelCard.QuantitativeAnalysis";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelCard_QuantitativeAnalysis;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelCard_QuantitativeAnalysis;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelCard_QuantitativeAnalysis;
    static equals(a: ModelCard_QuantitativeAnalysis | PlainMessage<ModelCard_QuantitativeAnalysis> | undefined, b: ModelCard_QuantitativeAnalysis | PlainMessage<ModelCard_QuantitativeAnalysis> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ModelCard.QuantitativeAnalysis.PerformanceMetrics
 */
export declare class ModelCard_QuantitativeAnalysis_PerformanceMetrics extends Message<ModelCard_QuantitativeAnalysis_PerformanceMetrics> {
    /**
     * The type of performance metric.
     *
     * @generated from field: optional string type = 1;
     */
    type?: string;
    /**
     * The value of the performance metric.
     *
     * @generated from field: optional string value = 2;
     */
    value?: string;
    /**
     * The name of the slice this metric was computed on. By default, assume this metric is not sliced.
     *
     * @generated from field: optional string slice = 3;
     */
    slice?: string;
    /**
     * The confidence interval of the metric.
     *
     * @generated from field: optional cyclonedx.v1_5.ModelCard.QuantitativeAnalysis.PerformanceMetrics.ConfidenceInterval confidenceInterval = 4;
     */
    confidenceInterval?: ModelCard_QuantitativeAnalysis_PerformanceMetrics_ConfidenceInterval;
    constructor(data?: PartialMessage<ModelCard_QuantitativeAnalysis_PerformanceMetrics>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ModelCard.QuantitativeAnalysis.PerformanceMetrics";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelCard_QuantitativeAnalysis_PerformanceMetrics;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelCard_QuantitativeAnalysis_PerformanceMetrics;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelCard_QuantitativeAnalysis_PerformanceMetrics;
    static equals(a: ModelCard_QuantitativeAnalysis_PerformanceMetrics | PlainMessage<ModelCard_QuantitativeAnalysis_PerformanceMetrics> | undefined, b: ModelCard_QuantitativeAnalysis_PerformanceMetrics | PlainMessage<ModelCard_QuantitativeAnalysis_PerformanceMetrics> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ModelCard.QuantitativeAnalysis.PerformanceMetrics.ConfidenceInterval
 */
export declare class ModelCard_QuantitativeAnalysis_PerformanceMetrics_ConfidenceInterval extends Message<ModelCard_QuantitativeAnalysis_PerformanceMetrics_ConfidenceInterval> {
    /**
     * The lower bound of the confidence interval.
     *
     * @generated from field: optional string lowerBound = 1;
     */
    lowerBound?: string;
    /**
     * The upper bound of the confidence interval.
     *
     * @generated from field: optional string upperBound = 2;
     */
    upperBound?: string;
    constructor(data?: PartialMessage<ModelCard_QuantitativeAnalysis_PerformanceMetrics_ConfidenceInterval>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ModelCard.QuantitativeAnalysis.PerformanceMetrics.ConfidenceInterval";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelCard_QuantitativeAnalysis_PerformanceMetrics_ConfidenceInterval;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelCard_QuantitativeAnalysis_PerformanceMetrics_ConfidenceInterval;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelCard_QuantitativeAnalysis_PerformanceMetrics_ConfidenceInterval;
    static equals(a: ModelCard_QuantitativeAnalysis_PerformanceMetrics_ConfidenceInterval | PlainMessage<ModelCard_QuantitativeAnalysis_PerformanceMetrics_ConfidenceInterval> | undefined, b: ModelCard_QuantitativeAnalysis_PerformanceMetrics_ConfidenceInterval | PlainMessage<ModelCard_QuantitativeAnalysis_PerformanceMetrics_ConfidenceInterval> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ModelCard.ModelCardConsiderations
 */
export declare class ModelCard_ModelCardConsiderations extends Message<ModelCard_ModelCardConsiderations> {
    /**
     * Who are the intended users of the model?
     *
     * @generated from field: repeated string users = 1;
     */
    users: string[];
    /**
     * What are the intended use cases of the model?
     *
     * @generated from field: repeated string useCases = 2;
     */
    useCases: string[];
    /**
     * What are the known technical limitations of the model? E.g. What kind(s) of data should the model be expected not to perform well on? What are the factors that might degrade model performance?
     *
     * @generated from field: repeated string technicalLimitations = 3;
     */
    technicalLimitations: string[];
    /**
     * What are the known tradeoffs in accuracy/performance of the model?
     *
     * @generated from field: repeated string performanceTradeoffs = 4;
     */
    performanceTradeoffs: string[];
    /**
     * What are the ethical (or environmental) risks involved in the application of this model?
     *
     * @generated from field: repeated cyclonedx.v1_5.ModelCard.ModelCardConsiderations.EthicalConsiderations ethicalConsiderations = 5;
     */
    ethicalConsiderations: ModelCard_ModelCardConsiderations_EthicalConsiderations[];
    /**
     * How does the model affect groups at risk of being systematically disadvantaged? What are the harms and benefits to the various affected groups?
     *
     * @generated from field: repeated cyclonedx.v1_5.ModelCard.ModelCardConsiderations.FairnessAssessments fairnessAssessments = 6;
     */
    fairnessAssessments: ModelCard_ModelCardConsiderations_FairnessAssessments[];
    constructor(data?: PartialMessage<ModelCard_ModelCardConsiderations>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ModelCard.ModelCardConsiderations";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelCard_ModelCardConsiderations;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelCard_ModelCardConsiderations;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelCard_ModelCardConsiderations;
    static equals(a: ModelCard_ModelCardConsiderations | PlainMessage<ModelCard_ModelCardConsiderations> | undefined, b: ModelCard_ModelCardConsiderations | PlainMessage<ModelCard_ModelCardConsiderations> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ModelCard.ModelCardConsiderations.EthicalConsiderations
 */
export declare class ModelCard_ModelCardConsiderations_EthicalConsiderations extends Message<ModelCard_ModelCardConsiderations_EthicalConsiderations> {
    /**
     * The name of the risk.
     *
     * @generated from field: optional string name = 1;
     */
    name?: string;
    /**
     * Strategy used to address this risk.
     *
     * @generated from field: optional string mitigationStrategy = 2;
     */
    mitigationStrategy?: string;
    constructor(data?: PartialMessage<ModelCard_ModelCardConsiderations_EthicalConsiderations>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ModelCard.ModelCardConsiderations.EthicalConsiderations";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelCard_ModelCardConsiderations_EthicalConsiderations;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelCard_ModelCardConsiderations_EthicalConsiderations;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelCard_ModelCardConsiderations_EthicalConsiderations;
    static equals(a: ModelCard_ModelCardConsiderations_EthicalConsiderations | PlainMessage<ModelCard_ModelCardConsiderations_EthicalConsiderations> | undefined, b: ModelCard_ModelCardConsiderations_EthicalConsiderations | PlainMessage<ModelCard_ModelCardConsiderations_EthicalConsiderations> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ModelCard.ModelCardConsiderations.FairnessAssessments
 */
export declare class ModelCard_ModelCardConsiderations_FairnessAssessments extends Message<ModelCard_ModelCardConsiderations_FairnessAssessments> {
    /**
     * The groups or individuals at risk of being systematically disadvantaged by the model.
     *
     * @generated from field: optional string groupAtRisk = 1;
     */
    groupAtRisk?: string;
    /**
     * Expected benefits to the identified groups.
     *
     * @generated from field: optional string benefits = 2;
     */
    benefits?: string;
    /**
     * Expected harms to the identified groups.
     *
     * @generated from field: optional string harms = 3;
     */
    harms?: string;
    /**
     * With respect to the benefits and harms outlined, please describe any mitigation strategy implemented.
     *
     * @generated from field: optional string mitigationStrategy = 4;
     */
    mitigationStrategy?: string;
    constructor(data?: PartialMessage<ModelCard_ModelCardConsiderations_FairnessAssessments>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ModelCard.ModelCardConsiderations.FairnessAssessments";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelCard_ModelCardConsiderations_FairnessAssessments;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelCard_ModelCardConsiderations_FairnessAssessments;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelCard_ModelCardConsiderations_FairnessAssessments;
    static equals(a: ModelCard_ModelCardConsiderations_FairnessAssessments | PlainMessage<ModelCard_ModelCardConsiderations_FairnessAssessments> | undefined, b: ModelCard_ModelCardConsiderations_FairnessAssessments | PlainMessage<ModelCard_ModelCardConsiderations_FairnessAssessments> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ComponentData
 */
export declare class ComponentData extends Message<ComponentData> {
    /**
     * An optional identifier which can be used to reference the dataset elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.
     *
     * @generated from field: optional string bom_ref = 1;
     */
    bomRef?: string;
    /**
     * The general theme or subject matter of the data being specified.
     *
     * @generated from field: cyclonedx.v1_5.ComponentDataType type = 2;
     */
    type: ComponentDataType;
    /**
     * The name of the dataset.
     *
     * @generated from field: optional string name = 3;
     */
    name?: string;
    /**
     * The contents or references to the contents of the data being described.
     *
     * @generated from field: optional cyclonedx.v1_5.ComponentData.ComponentDataContents contents = 4;
     */
    contents?: ComponentData_ComponentDataContents;
    /**
     * Data classification tags data according to its type, sensitivity, and value if altered, stolen, or destroyed.
     *
     * @generated from field: optional string classification = 5;
     */
    classification?: string;
    /**
     * A description of any sensitive data in a dataset.
     *
     * @generated from field: repeated string sensitiveData = 6;
     */
    sensitiveData: string[];
    /**
     * A collection of graphics that represent various measurements.
     *
     * @generated from field: optional cyclonedx.v1_5.GraphicsCollection graphics = 7;
     */
    graphics?: GraphicsCollection;
    /**
     * A description of the dataset. Can describe size of dataset, whether it's used for source code, training, testing, or validation, etc.
     *
     * @generated from field: optional string description = 8;
     */
    description?: string;
    /**
     * Data Governance
     *
     * @generated from field: optional cyclonedx.v1_5.DataGovernance governance = 9;
     */
    governance?: DataGovernance;
    constructor(data?: PartialMessage<ComponentData>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ComponentData";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentData;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentData;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentData;
    static equals(a: ComponentData | PlainMessage<ComponentData> | undefined, b: ComponentData | PlainMessage<ComponentData> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.ComponentData.ComponentDataContents
 */
export declare class ComponentData_ComponentDataContents extends Message<ComponentData_ComponentDataContents> {
    /**
     * An optional way to include textual or encoded data.
     *
     * @generated from field: optional cyclonedx.v1_5.AttachedText attachment = 1;
     */
    attachment?: AttachedText;
    /**
     * The URL to where the data can be retrieved.
     *
     * @generated from field: optional string url = 2;
     */
    url?: string;
    /**
     * Provides the ability to document name-value parameters used for configuration.
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 3;
     */
    properties: Property[];
    constructor(data?: PartialMessage<ComponentData_ComponentDataContents>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ComponentData.ComponentDataContents";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentData_ComponentDataContents;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentData_ComponentDataContents;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentData_ComponentDataContents;
    static equals(a: ComponentData_ComponentDataContents | PlainMessage<ComponentData_ComponentDataContents> | undefined, b: ComponentData_ComponentDataContents | PlainMessage<ComponentData_ComponentDataContents> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.DataGovernance
 */
export declare class DataGovernance extends Message<DataGovernance> {
    /**
     * Data custodians are responsible for the safe custody, transport, and storage of data.
     *
     * @generated from field: repeated cyclonedx.v1_5.DataGovernance.DataGovernanceResponsibleParty custodians = 1;
     */
    custodians: DataGovernance_DataGovernanceResponsibleParty[];
    /**
     * Data stewards are responsible for data content, context, and associated business rules.
     *
     * @generated from field: repeated cyclonedx.v1_5.DataGovernance.DataGovernanceResponsibleParty stewards = 2;
     */
    stewards: DataGovernance_DataGovernanceResponsibleParty[];
    /**
     * Data owners are concerned with risk and appropriate access to data.
     *
     * @generated from field: repeated cyclonedx.v1_5.DataGovernance.DataGovernanceResponsibleParty owners = 3;
     */
    owners: DataGovernance_DataGovernanceResponsibleParty[];
    constructor(data?: PartialMessage<DataGovernance>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.DataGovernance";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataGovernance;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataGovernance;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataGovernance;
    static equals(a: DataGovernance | PlainMessage<DataGovernance> | undefined, b: DataGovernance | PlainMessage<DataGovernance> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.DataGovernance.DataGovernanceResponsibleParty
 */
export declare class DataGovernance_DataGovernanceResponsibleParty extends Message<DataGovernance_DataGovernanceResponsibleParty> {
    /**
     * @generated from oneof cyclonedx.v1_5.DataGovernance.DataGovernanceResponsibleParty.choice
     */
    choice: {
        /**
         * @generated from field: cyclonedx.v1_5.OrganizationalEntity organization = 1;
         */
        value: OrganizationalEntity;
        case: "organization";
    } | {
        /**
         * @generated from field: cyclonedx.v1_5.OrganizationalContact contact = 2;
         */
        value: OrganizationalContact;
        case: "contact";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<DataGovernance_DataGovernanceResponsibleParty>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.DataGovernance.DataGovernanceResponsibleParty";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataGovernance_DataGovernanceResponsibleParty;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataGovernance_DataGovernanceResponsibleParty;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataGovernance_DataGovernanceResponsibleParty;
    static equals(a: DataGovernance_DataGovernanceResponsibleParty | PlainMessage<DataGovernance_DataGovernanceResponsibleParty> | undefined, b: DataGovernance_DataGovernanceResponsibleParty | PlainMessage<DataGovernance_DataGovernanceResponsibleParty> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.GraphicsCollection
 */
export declare class GraphicsCollection extends Message<GraphicsCollection> {
    /**
     * A description of this collection of graphics.
     *
     * @generated from field: optional string description = 1;
     */
    description?: string;
    /**
     * A collection of graphics.
     *
     * @generated from field: repeated cyclonedx.v1_5.GraphicsCollection.Graphic graphic = 2;
     */
    graphic: GraphicsCollection_Graphic[];
    constructor(data?: PartialMessage<GraphicsCollection>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.GraphicsCollection";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GraphicsCollection;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GraphicsCollection;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GraphicsCollection;
    static equals(a: GraphicsCollection | PlainMessage<GraphicsCollection> | undefined, b: GraphicsCollection | PlainMessage<GraphicsCollection> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.GraphicsCollection.Graphic
 */
export declare class GraphicsCollection_Graphic extends Message<GraphicsCollection_Graphic> {
    /**
     * The name of the graphic.
     *
     * @generated from field: optional string name = 1;
     */
    name?: string;
    /**
     * The graphic (vector or raster). Base64 encoding MUST be specified for binary images.
     *
     * @generated from field: optional cyclonedx.v1_5.AttachedText image = 2;
     */
    image?: AttachedText;
    constructor(data?: PartialMessage<GraphicsCollection_Graphic>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.GraphicsCollection.Graphic";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GraphicsCollection_Graphic;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GraphicsCollection_Graphic;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GraphicsCollection_Graphic;
    static equals(a: GraphicsCollection_Graphic | PlainMessage<GraphicsCollection_Graphic> | undefined, b: GraphicsCollection_Graphic | PlainMessage<GraphicsCollection_Graphic> | undefined): boolean;
}
/**
 * Describes workflows and resources that captures rules and other aspects of how the associated BOM component or service was formed.
 *
 * @generated from message cyclonedx.v1_5.Formula
 */
export declare class Formula extends Message<Formula> {
    /**
     * BOM unique reference to the resource.
     *
     * @generated from field: optional string bom_ref = 1;
     */
    bomRef?: string;
    /**
     * Transient components that are used in tasks that constitute one or more of this formula's workflows
     *
     * @generated from field: repeated cyclonedx.v1_5.Component components = 2;
     */
    components: Component[];
    /**
     * Transient services that are used in tasks that constitute one or more of this formula's workflows
     *
     * @generated from field: repeated cyclonedx.v1_5.Service services = 3;
     */
    services: Service[];
    /**
     * List of workflows that can be declared to accomplish specific orchestrated goals and independently triggered.
     *
     * @generated from field: repeated cyclonedx.v1_5.Workflow workflows = 4;
     */
    workflows: Workflow[];
    /**
     * Domain-specific formula properties.
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 5;
     */
    properties: Property[];
    constructor(data?: PartialMessage<Formula>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Formula";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Formula;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Formula;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Formula;
    static equals(a: Formula | PlainMessage<Formula> | undefined, b: Formula | PlainMessage<Formula> | undefined): boolean;
}
/**
 * A specialized orchestration task.
 *
 * @generated from message cyclonedx.v1_5.Workflow
 */
export declare class Workflow extends Message<Workflow> {
    /**
     * BOM unique reference to the resource.
     *
     * @generated from field: string bom_ref = 1;
     */
    bomRef: string;
    /**
     * The unique identifier for the resource instance within its deployment context.
     *
     * @generated from field: string uid = 2;
     */
    uid: string;
    /**
     * The name of the resource instance.
     *
     * @generated from field: optional string name = 3;
     */
    name?: string;
    /**
     * A description of the resource instance.
     *
     * @generated from field: optional string description = 4;
     */
    description?: string;
    /**
     * Domain-specific resource instance properties.
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 5;
     */
    properties: Property[];
    /**
     * References to component or service resources that are used to realize the resource instance.
     *
     * @generated from field: repeated cyclonedx.v1_5.ResourceReferenceChoice resourceReferences = 6;
     */
    resourceReferences: ResourceReferenceChoice[];
    /**
     * The tasks that comprise the workflow.
     *
     * @generated from field: repeated cyclonedx.v1_5.Task tasks = 7;
     */
    tasks: Task[];
    /**
     * The graph of dependencies between tasks within the workflow.
     *
     * @generated from field: repeated cyclonedx.v1_5.Dependency taskDependencies = 8;
     */
    taskDependencies: Dependency[];
    /**
     * Indicates the types of activities performed by the set of workflow tasks.
     *
     * @generated from field: repeated cyclonedx.v1_5.TaskType taskTypes = 9;
     */
    taskTypes: TaskType[];
    /**
     * The trigger that initiated the task.
     *
     * @generated from field: optional cyclonedx.v1_5.Trigger trigger = 10;
     */
    trigger?: Trigger;
    /**
     * The sequence of steps for the task.
     *
     * @generated from field: repeated cyclonedx.v1_5.Step steps = 11;
     */
    steps: Step[];
    /**
     * Represents resources and data brought into a task at runtime by executor or task commands
     *
     * @generated from field: repeated cyclonedx.v1_5.InputType inputs = 12;
     */
    inputs: InputType[];
    /**
     * Represents resources and data output from a task at runtime by executor or task commands
     *
     * @generated from field: repeated cyclonedx.v1_5.OutputType outputs = 13;
     */
    outputs: OutputType[];
    /**
     * The date and time (timestamp) when the task started.
     *
     * @generated from field: optional google.protobuf.Timestamp timeStart = 14;
     */
    timeStart?: Timestamp;
    /**
     * The date and time (timestamp) when the task ended.
     *
     * @generated from field: optional google.protobuf.Timestamp timeEnd = 15;
     */
    timeEnd?: Timestamp;
    /**
     * A set of named filesystem or data resource shareable by workflow tasks.
     *
     * @generated from field: repeated cyclonedx.v1_5.Workspace workspaces = 16;
     */
    workspaces: Workspace[];
    /**
     * A graph of the component runtime topology for workflow's instance.
     *
     * @generated from field: repeated cyclonedx.v1_5.Dependency runtimeTopology = 17;
     */
    runtimeTopology: Dependency[];
    constructor(data?: PartialMessage<Workflow>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Workflow";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workflow;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workflow;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workflow;
    static equals(a: Workflow | PlainMessage<Workflow> | undefined, b: Workflow | PlainMessage<Workflow> | undefined): boolean;
}
/**
 * Describes the inputs, sequence of steps and resources used to accomplish a task and its output.
 *
 * @generated from message cyclonedx.v1_5.Task
 */
export declare class Task extends Message<Task> {
    /**
     * BOM unique reference to the resource.
     *
     * @generated from field: string bom_ref = 1;
     */
    bomRef: string;
    /**
     * The unique identifier for the resource instance within its deployment context.
     *
     * @generated from field: string uid = 2;
     */
    uid: string;
    /**
     * The name of the resource instance.
     *
     * @generated from field: optional string name = 3;
     */
    name?: string;
    /**
     * A description of the resource instance.
     *
     * @generated from field: optional string description = 4;
     */
    description?: string;
    /**
     * Domain-specific task instance properties.
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 5;
     */
    properties: Property[];
    /**
     * References to component or service resources that are used to realize the resource instance.
     *
     * @generated from field: repeated cyclonedx.v1_5.ResourceReferenceChoice resourceReferences = 6;
     */
    resourceReferences: ResourceReferenceChoice[];
    /**
     * Indicates the types of activities performed by the set of workflow tasks.
     *
     * @generated from field: repeated cyclonedx.v1_5.TaskType taskTypes = 7;
     */
    taskTypes: TaskType[];
    /**
     * The trigger that initiated the task.
     *
     * @generated from field: optional cyclonedx.v1_5.Trigger trigger = 8;
     */
    trigger?: Trigger;
    /**
     * "The sequence of steps for the task.
     *
     * @generated from field: repeated cyclonedx.v1_5.Step steps = 9;
     */
    steps: Step[];
    /**
     * Represents resources and data brought into a task at runtime by executor or task commands
     *
     * @generated from field: repeated cyclonedx.v1_5.InputType inputs = 10;
     */
    inputs: InputType[];
    /**
     * Represents resources and data output from a task at runtime by executor or task commands
     *
     * @generated from field: repeated cyclonedx.v1_5.OutputType outputs = 11;
     */
    outputs: OutputType[];
    /**
     * The date and time (timestamp) when the task started.
     *
     * @generated from field: optional google.protobuf.Timestamp timeStart = 14;
     */
    timeStart?: Timestamp;
    /**
     * The date and time (timestamp) when the task ended.
     *
     * @generated from field: optional google.protobuf.Timestamp timeEnd = 15;
     */
    timeEnd?: Timestamp;
    /**
     * A set of named filesystem or data resource shareable by workflow tasks.
     *
     * @generated from field: repeated cyclonedx.v1_5.Workspace workspaces = 16;
     */
    workspaces: Workspace[];
    /**
     * A graph of the component runtime topology for task's instance.
     *
     * @generated from field: repeated cyclonedx.v1_5.Dependency runtimeTopology = 17;
     */
    runtimeTopology: Dependency[];
    constructor(data?: PartialMessage<Task>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Task";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task;
    static equals(a: Task | PlainMessage<Task> | undefined, b: Task | PlainMessage<Task> | undefined): boolean;
}
/**
 * Executes specific commands or tools in order to accomplish its owning task as part of a sequence.
 *
 * @generated from message cyclonedx.v1_5.Step
 */
export declare class Step extends Message<Step> {
    /**
     * A name for the step.
     *
     * @generated from field: optional string name = 1;
     */
    name?: string;
    /**
     * A description of the step.
     *
     * @generated from field: optional string description = 2;
     */
    description?: string;
    /**
     * Ordered list of commands or directives for the step
     *
     * @generated from field: repeated cyclonedx.v1_5.Command commands = 3;
     */
    commands: Command[];
    /**
     * Domain-specific step properties.
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 4;
     */
    properties: Property[];
    constructor(data?: PartialMessage<Step>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Step";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Step;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Step;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Step;
    static equals(a: Step | PlainMessage<Step> | undefined, b: Step | PlainMessage<Step> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.Command
 */
export declare class Command extends Message<Command> {
    /**
     * A text representation of the executed command.
     *
     * @generated from field: optional string executed = 1;
     */
    executed?: string;
    /**
     * Domain-specific command properties.
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 2;
     */
    properties: Property[];
    constructor(data?: PartialMessage<Command>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Command";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Command;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Command;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Command;
    static equals(a: Command | PlainMessage<Command> | undefined, b: Command | PlainMessage<Command> | undefined): boolean;
}
/**
 * A named filesystem or data resource shareable by workflow tasks.
 *
 * @generated from message cyclonedx.v1_5.Workspace
 */
export declare class Workspace extends Message<Workspace> {
    /**
     * BOM unique reference to the resource.
     *
     * @generated from field: string bom_ref = 1;
     */
    bomRef: string;
    /**
     * The unique identifier for the resource instance within its deployment context.
     *
     * @generated from field: string uid = 2;
     */
    uid: string;
    /**
     * The name of the resource instance.
     *
     * @generated from field: optional string name = 3;
     */
    name?: string;
    /**
     * The names for the workspace as referenced by other workflow tasks. Effectively, a name mapping so other tasks can use their own local name in their steps.
     *
     * @generated from field: repeated string aliases = 4;
     */
    aliases: string[];
    /**
     * A description of the resource instance.
     *
     * @generated from field: optional string description = 5;
     */
    description?: string;
    /**
     * Domain-specific workspace instance properties.
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 6;
     */
    properties: Property[];
    /**
     * References to component or service resources that are used to realize the resource instance.
     *
     * @generated from field: repeated cyclonedx.v1_5.ResourceReferenceChoice resourceReferences = 7;
     */
    resourceReferences: ResourceReferenceChoice[];
    /**
     * Describes the read-write access control for the workspace relative to the owning resource instance.
     *
     * @generated from field: optional cyclonedx.v1_5.Workspace.AccessMode accessMode = 8;
     */
    accessMode?: Workspace_AccessMode;
    /**
     * A path to a location on disk where the workspace will be available to the associated task's steps.
     *
     * @generated from field: optional string mountPath = 9;
     */
    mountPath?: string;
    /**
     * The name of a domain-specific data type the workspace represents.
     *
     * @generated from field: optional string managedDataType = 10;
     */
    managedDataType?: string;
    /**
     * Identifies the reference to the request for a specific volume type and parameters.
     *
     * @generated from field: optional string volumeRequest = 11;
     */
    volumeRequest?: string;
    /**
     * Information about the actual volume instance allocated to the workspace.
     *
     * @generated from field: optional cyclonedx.v1_5.Volume volume = 12;
     */
    volume?: Volume;
    constructor(data?: PartialMessage<Workspace>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Workspace";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workspace;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workspace;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workspace;
    static equals(a: Workspace | PlainMessage<Workspace> | undefined, b: Workspace | PlainMessage<Workspace> | undefined): boolean;
}
/**
 * @generated from enum cyclonedx.v1_5.Workspace.AccessMode
 */
export declare enum Workspace_AccessMode {
    /**
     * @generated from enum value: ACCESS_MODE_READ_ONLY = 0;
     */
    READ_ONLY = 0,
    /**
     * @generated from enum value: ACCESS_MODE_READ_WRITE = 1;
     */
    READ_WRITE = 1,
    /**
     * @generated from enum value: ACCESS_MODE_READ_WRITE_ONCE = 2;
     */
    READ_WRITE_ONCE = 2,
    /**
     * @generated from enum value: ACCESS_MODE_WRITE_ONCE = 3;
     */
    WRITE_ONCE = 3,
    /**
     * @generated from enum value: ACCESS_MODE_WRITE_ONLY = 4;
     */
    WRITE_ONLY = 4
}
/**
 * An identifiable, logical unit of data storage tied to a physical device.
 *
 * @generated from message cyclonedx.v1_5.Volume
 */
export declare class Volume extends Message<Volume> {
    /**
     * The unique identifier for the volume instance within its deployment context.
     *
     * @generated from field: optional string uid = 1;
     */
    uid?: string;
    /**
     * The name of the volume instance
     *
     * @generated from field: optional string name = 2;
     */
    name?: string;
    /**
     * The volume mode for the volume instance.
     *
     * @generated from field: optional cyclonedx.v1_5.Volume.VolumeMode mode = 3;
     */
    mode?: Volume_VolumeMode;
    /**
     * The underlying path created from the actual volume.
     *
     * @generated from field: optional string path = 4;
     */
    path?: string;
    /**
     * The allocated size of the volume accessible to the associated workspace. This should include the scalar size as well as IEC standard unit in either decimal or binary form.
     *
     * @generated from field: optional string sizeAllocated = 5;
     */
    sizeAllocated?: string;
    /**
     * Indicates if the volume persists beyond the life of the resource it is associated with.
     *
     * @generated from field: optional bool persistent = 6;
     */
    persistent?: boolean;
    /**
     * Indicates if the volume is remotely (i.e., network) attached.
     *
     * @generated from field: optional bool remote = 7;
     */
    remote?: boolean;
    /**
     * Domain-specific volume instance properties.
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 8;
     */
    properties: Property[];
    constructor(data?: PartialMessage<Volume>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Volume";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Volume;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Volume;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Volume;
    static equals(a: Volume | PlainMessage<Volume> | undefined, b: Volume | PlainMessage<Volume> | undefined): boolean;
}
/**
 * @generated from enum cyclonedx.v1_5.Volume.VolumeMode
 */
export declare enum Volume_VolumeMode {
    /**
     * @generated from enum value: VOLUME_MODE_FILESYSTEM = 0;
     */
    FILESYSTEM = 0,
    /**
     * @generated from enum value: VOLUME_MODE_BLOCK = 1;
     */
    BLOCK = 1
}
/**
 * Represents a resource that can conditionally activate (or fire) tasks based upon associated events and their data.
 *
 * @generated from message cyclonedx.v1_5.Trigger
 */
export declare class Trigger extends Message<Trigger> {
    /**
     * BOM unique reference to the resource.
     *
     * @generated from field: string bom_ref = 1;
     */
    bomRef: string;
    /**
     * The unique identifier for the resource instance within its deployment context.
     *
     * @generated from field: string uid = 2;
     */
    uid: string;
    /**
     * The name of the resource instance.
     *
     * @generated from field: optional string name = 3;
     */
    name?: string;
    /**
     * A description of the resource instance.
     *
     * @generated from field: optional string description = 4;
     */
    description?: string;
    /**
     * Additional properties of the trigger.
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 5;
     */
    properties: Property[];
    /**
     * References to component or service resources that are used to realize the resource instance.
     *
     * @generated from field: repeated cyclonedx.v1_5.ResourceReferenceChoice resourceReferences = 6;
     */
    resourceReferences: ResourceReferenceChoice[];
    /**
     * The source type of event which caused the trigger to fire.
     *
     * @generated from field: cyclonedx.v1_5.Trigger.TriggerType type = 7;
     */
    type: Trigger_TriggerType;
    /**
     * The event data that caused the associated trigger to activate.
     *
     * @generated from field: optional cyclonedx.v1_5.Event event = 8;
     */
    event?: Event;
    /**
     * Conditions
     *
     * @generated from field: repeated cyclonedx.v1_5.Condition conditions = 9;
     */
    conditions: Condition[];
    /**
     * The date and time (timestamp) when the trigger was activated.
     *
     * @generated from field: optional google.protobuf.Timestamp timeActivated = 10;
     */
    timeActivated?: Timestamp;
    /**
     * Represents resources and data brought into a task at runtime by executor or task commands
     *
     * @generated from field: repeated cyclonedx.v1_5.InputType inputs = 11;
     */
    inputs: InputType[];
    /**
     * Represents resources and data output from a task at runtime by executor or task commands
     *
     * @generated from field: repeated cyclonedx.v1_5.OutputType outputs = 12;
     */
    outputs: OutputType[];
    constructor(data?: PartialMessage<Trigger>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Trigger";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger;
    static equals(a: Trigger | PlainMessage<Trigger> | undefined, b: Trigger | PlainMessage<Trigger> | undefined): boolean;
}
/**
 * @generated from enum cyclonedx.v1_5.Trigger.TriggerType
 */
export declare enum Trigger_TriggerType {
    /**
     * @generated from enum value: TRIGGER_TYPE_MANUAL = 0;
     */
    MANUAL = 0,
    /**
     * @generated from enum value: TRIGGER_TYPE_API = 1;
     */
    API = 1,
    /**
     * @generated from enum value: TRIGGER_TYPE_WEBHOOK = 2;
     */
    WEBHOOK = 2,
    /**
     * @generated from enum value: TRIGGER_TYPE_SCHEDULED = 3;
     */
    SCHEDULED = 3
}
/**
 * Represents something that happened that may trigger a response.
 *
 * @generated from message cyclonedx.v1_5.Event
 */
export declare class Event extends Message<Event> {
    /**
     * The unique identifier of the event.
     *
     * @generated from field: optional string uid = 1;
     */
    uid?: string;
    /**
     * A description of the event.
     *
     * @generated from field: optional string description = 2;
     */
    description?: string;
    /**
     * The date and time (timestamp) when the event was received.
     *
     * @generated from field: optional google.protobuf.Timestamp timeReceived = 3;
     */
    timeReceived?: Timestamp;
    /**
     * Encoding of the raw event data.
     *
     * @generated from field: optional cyclonedx.v1_5.AttachedText data = 4;
     */
    data?: AttachedText;
    /**
     * References the component or service that was the source of the event
     *
     * @generated from field: optional cyclonedx.v1_5.ResourceReferenceChoice source = 5;
     */
    source?: ResourceReferenceChoice;
    /**
     * References the component or service that was the target of the event
     *
     * @generated from field: optional cyclonedx.v1_5.ResourceReferenceChoice target = 6;
     */
    target?: ResourceReferenceChoice;
    /**
     * Additional properties of the event.
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 7;
     */
    properties: Property[];
    constructor(data?: PartialMessage<Event>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Event";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event;
    static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean;
}
/**
 * Type that represents various input data types and formats.
 *
 * @generated from message cyclonedx.v1_5.InputType
 */
export declare class InputType extends Message<InputType> {
    /**
     * A references to the component or service that provided the input to the task (e.g., reference to a service with data flow value of `inbound`)
     *
     * @generated from field: optional cyclonedx.v1_5.ResourceReferenceChoice source = 1;
     */
    source?: ResourceReferenceChoice;
    /**
     * A reference to the component or service that received or stored the input if not the task itself (e.g., a local, named storage workspace)
     *
     * @generated from field: optional cyclonedx.v1_5.ResourceReferenceChoice target = 2;
     */
    target?: ResourceReferenceChoice;
    /**
     * A reference to an independent resource provided as an input to a task by the workflow runtime.
     *
     * @generated from field: optional cyclonedx.v1_5.ResourceReferenceChoice resource = 3;
     */
    resource?: ResourceReferenceChoice;
    /**
     * Inputs that have the form of parameters with names and values.
     *
     * @generated from field: repeated cyclonedx.v1_5.Parameter parameters = 4;
     */
    parameters: Parameter[];
    /**
     * Inputs that have the form of parameters with names and values.
     *
     * @generated from field: repeated cyclonedx.v1_5.EnvironmentVars environmentVars = 5;
     */
    environmentVars: EnvironmentVars[];
    /**
     * Inputs that have the form of data.
     *
     * @generated from field: optional cyclonedx.v1_5.AttachedText data = 6;
     */
    data?: AttachedText;
    /**
     * Additional properties of the input data.
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 7;
     */
    properties: Property[];
    constructor(data?: PartialMessage<InputType>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.InputType";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputType;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputType;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputType;
    static equals(a: InputType | PlainMessage<InputType> | undefined, b: InputType | PlainMessage<InputType> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.OutputType
 */
export declare class OutputType extends Message<OutputType> {
    /**
     * Describes the type of data output.
     *
     * @generated from field: optional cyclonedx.v1_5.OutputType.OutputTypeType type = 1;
     */
    type?: OutputType_OutputTypeType;
    /**
     * Component or service that generated or provided the output from the task (e.g., a build tool)
     *
     * @generated from field: optional cyclonedx.v1_5.ResourceReferenceChoice source = 2;
     */
    source?: ResourceReferenceChoice;
    /**
     * Component or service that received the output from the task (e.g., reference to an artifactory service with data flow value of `outbound`)
     *
     * @generated from field: optional cyclonedx.v1_5.ResourceReferenceChoice target = 3;
     */
    target?: ResourceReferenceChoice;
    /**
     * A reference to an independent resource generated as output by the task.
     *
     * @generated from field: optional cyclonedx.v1_5.ResourceReferenceChoice resource = 4;
     */
    resource?: ResourceReferenceChoice;
    /**
     * Outputs that have the form of data.
     *
     * @generated from field: optional cyclonedx.v1_5.AttachedText data = 5;
     */
    data?: AttachedText;
    /**
     * Outputs that have the form of environment variables.
     *
     * @generated from field: repeated cyclonedx.v1_5.EnvironmentVars environmentVars = 6;
     */
    environmentVars: EnvironmentVars[];
    /**
     * Additional properties of the output data.
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 7;
     */
    properties: Property[];
    constructor(data?: PartialMessage<OutputType>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.OutputType";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutputType;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutputType;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutputType;
    static equals(a: OutputType | PlainMessage<OutputType> | undefined, b: OutputType | PlainMessage<OutputType> | undefined): boolean;
}
/**
 * @generated from enum cyclonedx.v1_5.OutputType.OutputTypeType
 */
export declare enum OutputType_OutputTypeType {
    /**
     * @generated from enum value: OUTPUT_TYPE_ARTIFACT = 0;
     */
    OUTPUT_TYPE_ARTIFACT = 0,
    /**
     * @generated from enum value: OUTPUT_TYPE_ATTESTATION = 1;
     */
    OUTPUT_TYPE_ATTESTATION = 1,
    /**
     * @generated from enum value: OUTPUT_TYPE_LOG = 2;
     */
    OUTPUT_TYPE_LOG = 2,
    /**
     * @generated from enum value: OUTPUT_TYPE_EVIDENCE = 3;
     */
    OUTPUT_TYPE_EVIDENCE = 3,
    /**
     * @generated from enum value: OUTPUT_TYPE_METRICS = 4;
     */
    OUTPUT_TYPE_METRICS = 4,
    /**
     * @generated from enum value: OUTPUT_TYPE_OTHER = 5;
     */
    OUTPUT_TYPE_OTHER = 5
}
/**
 * @generated from message cyclonedx.v1_5.ResourceReferenceChoice
 */
export declare class ResourceReferenceChoice extends Message<ResourceReferenceChoice> {
    /**
     * @generated from oneof cyclonedx.v1_5.ResourceReferenceChoice.choice
     */
    choice: {
        /**
         * @generated from field: string ref = 1;
         */
        value: string;
        case: "ref";
    } | {
        /**
         * @generated from field: cyclonedx.v1_5.ExternalReference externalReference = 2;
         */
        value: ExternalReference;
        case: "externalReference";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<ResourceReferenceChoice>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.ResourceReferenceChoice";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceReferenceChoice;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceReferenceChoice;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceReferenceChoice;
    static equals(a: ResourceReferenceChoice | PlainMessage<ResourceReferenceChoice> | undefined, b: ResourceReferenceChoice | PlainMessage<ResourceReferenceChoice> | undefined): boolean;
}
/**
 * A condition that was used to determine a trigger should be activated.
 *
 * @generated from message cyclonedx.v1_5.Condition
 */
export declare class Condition extends Message<Condition> {
    /**
     * Describes the set of conditions which cause the trigger to activate.
     *
     * @generated from field: optional string description = 1;
     */
    description?: string;
    /**
     * The logical expression that was evaluated that determined the trigger should be fired.
     *
     * @generated from field: optional string expression = 2;
     */
    expression?: string;
    /**
     * Domain-specific condition instance properties.
     *
     * @generated from field: repeated cyclonedx.v1_5.Property properties = 3;
     */
    properties: Property[];
    constructor(data?: PartialMessage<Condition>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Condition";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Condition;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Condition;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Condition;
    static equals(a: Condition | PlainMessage<Condition> | undefined, b: Condition | PlainMessage<Condition> | undefined): boolean;
}
/**
 * A representation of a functional parameter.
 *
 * @generated from message cyclonedx.v1_5.Parameter
 */
export declare class Parameter extends Message<Parameter> {
    /**
     * The name of the parameter.
     *
     * @generated from field: optional string name = 1;
     */
    name?: string;
    /**
     * The value of the parameter.
     *
     * @generated from field: optional string value = 2;
     */
    value?: string;
    /**
     * The data type of the parameter.
     *
     * @generated from field: optional string dataType = 3;
     */
    dataType?: string;
    constructor(data?: PartialMessage<Parameter>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.Parameter";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Parameter;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Parameter;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Parameter;
    static equals(a: Parameter | PlainMessage<Parameter> | undefined, b: Parameter | PlainMessage<Parameter> | undefined): boolean;
}
/**
 * @generated from message cyclonedx.v1_5.EnvironmentVars
 */
export declare class EnvironmentVars extends Message<EnvironmentVars> {
    /**
     * @generated from oneof cyclonedx.v1_5.EnvironmentVars.choice
     */
    choice: {
        /**
         * @generated from field: cyclonedx.v1_5.Property property = 1;
         */
        value: Property;
        case: "property";
    } | {
        /**
         * @generated from field: string value = 2;
         */
        value: string;
        case: "value";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<EnvironmentVars>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "cyclonedx.v1_5.EnvironmentVars";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnvironmentVars;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnvironmentVars;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnvironmentVars;
    static equals(a: EnvironmentVars | PlainMessage<EnvironmentVars> | undefined, b: EnvironmentVars | PlainMessage<EnvironmentVars> | undefined): boolean;
}
