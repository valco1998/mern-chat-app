#!/usr/bin/env node
'use strict';

var constants = require('./constants.js');
var require$$0 = require('@babel/runtime/helpers/interopRequireWildcard');
var require$$1 = require('node:path');
var require$$1$1 = require('@npmcli/promise-spawn');
var link = require('./link.js');

var npxCli$2 = {};

var npxCli$1 = {};

var _nodePath = require$$1;
var _promiseSpawn = require$$1$1;
var _constants = constants.constants;
var _link = link.link;
const npxPath = (0, _link.installLinks)(_constants.shadowBinPath, 'npx');
const injectionPath = _nodePath.join(_constants.distPath, 'npm-injection.js');
process.exitCode = 1;
const spawnPromise = _promiseSpawn(process.execPath, ['--disable-warning', 'ExperimentalWarning', '--require', injectionPath, npxPath, ...process.argv.slice(2)], {
  stdio: 'inherit'
});
spawnPromise.process.on('exit', (code, signal) => {
  if (signal) {
    process.kill(process.pid, signal);
  } else if (code !== null) {
    process.exit(code);
  }
});

(function (exports) {

	var _interopRequireWildcard = require$$0.default;
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {};
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function () {
	    return _npxCli.default;
	  }
	});
	var _npxCli = _interopRequireWildcard(npxCli$1, true);
	Object.keys(_npxCli).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  if (key in exports && exports[key] === _npxCli[key]) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function () {
	      return _npxCli[key];
	    }
	  });
	}); 
} (npxCli$2));

var npxCli = /*@__PURE__*/constants.getDefaultExportFromCjs(npxCli$2);

module.exports = npxCli;
