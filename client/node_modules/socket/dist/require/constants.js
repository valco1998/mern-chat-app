'use strict';

var require$$0 = require('node:fs');
var require$$1 = require('node:path');
var require$$2 = require('@socketsecurity/registry/lib/env');
var require$$3 = require('@socketsecurity/registry/lib/constants');
var require$$4 = require('semver');

var constants = {};

Object.defineProperty(constants, "__esModule", {
  value: true
});
constants.synpBinPath = constants.shadowBinPath = constants.rootPkgJsonPath = constants.rootPath = constants.rootDistPath = constants.rootBinPath = constants.nmBinPath = constants.distPath = constants.cdxgenBinPath = constants.UPDATE_SOCKET_OVERRIDES_IN_PACKAGE_LOCK_FILE = constants.SUPPORTS_SYNC_ESM = constants.SOCKET_CLI_ISSUES_URL = constants.NPM_REGISTRY_URL = constants.LOOP_SENTINEL = constants.ENV = constants.DIST_TYPE = constants.API_V0_URL = void 0;
var _nodeFs = require$$0;
var _nodePath = require$$1;
var _env = require$$2;
var _constants = require$$3;
var _semver = require$$4;
const {
  PACKAGE_JSON
} = _constants;
const SUPPORTS_SYNC_ESM = constants.SUPPORTS_SYNC_ESM = _semver.satisfies(process.versions.node, '>=22.12');
constants.API_V0_URL = 'https://api.socket.dev/v0';
const DIST_TYPE = constants.DIST_TYPE = SUPPORTS_SYNC_ESM ? 'module-sync' : 'require';
constants.LOOP_SENTINEL = 1_000_000;
constants.NPM_REGISTRY_URL = 'https://registry.npmjs.org';
const SOCKET_CLI_ISSUES_URL = constants.SOCKET_CLI_ISSUES_URL = 'https://github.com/SocketDev/socket-cli/issues';
const UPDATE_SOCKET_OVERRIDES_IN_PACKAGE_LOCK_FILE = constants.UPDATE_SOCKET_OVERRIDES_IN_PACKAGE_LOCK_FILE = 'UPDATE_SOCKET_OVERRIDES_IN_PACKAGE_LOCK_FILE';
constants.ENV = Object.freeze({
  // Flag set by the optimize command to bypass the packagesHaveRiskyIssues check.
  [UPDATE_SOCKET_OVERRIDES_IN_PACKAGE_LOCK_FILE]: (0, _env.envAsBoolean)(process.env[UPDATE_SOCKET_OVERRIDES_IN_PACKAGE_LOCK_FILE])
});

// Dynamically detect the rootPath so constants.ts can be used in tests.
const rootPath = constants.rootPath = (() => {
  let oldPath;
  let currPath = (0, _nodeFs.realpathSync)(__dirname);
  // Dirname stops when at the filepath root, e.g. '/' for posix and 'C:\\' for win32,
  // so `currPath` equal `oldPath`.
  while (currPath !== oldPath) {
    const pkgJsonPath = _nodePath.join(currPath, PACKAGE_JSON);
    if ((0, _nodeFs.existsSync)(pkgJsonPath)) {
      try {
        // Content matching socket is replaced by
        // the @rollup/plugin-replace plugin used in .config/rollup.base.config.mjs
        // with either 'socket' or '@socketsecurity/cli'.
        if (require(pkgJsonPath)?.name === 'socket') {
          return currPath;
        }
      } catch {}
    }
    oldPath = currPath;
    currPath = _nodePath.dirname(currPath);
  }
  throw new TypeError(`Socket CLI initialization error: rootPath cannot be resolved.\n\nPlease report to ${SOCKET_CLI_ISSUES_URL}.`);
})();
const rootDistPath = constants.rootDistPath = _nodePath.join(rootPath, 'dist');
constants.rootBinPath = _nodePath.join(rootPath, 'bin');
constants.rootPkgJsonPath = _nodePath.join(rootPath, PACKAGE_JSON);
const nmBinPath = constants.nmBinPath = _nodePath.join(rootPath, 'node_modules/.bin');
constants.cdxgenBinPath = _nodePath.join(nmBinPath, 'cdxgen');
constants.distPath = _nodePath.join(rootDistPath, DIST_TYPE);
constants.shadowBinPath = _nodePath.join(rootPath, 'shadow', DIST_TYPE);
constants.synpBinPath = _nodePath.join(nmBinPath, 'synp');

exports.constants = constants;
